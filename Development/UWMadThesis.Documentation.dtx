%   \iffalse
%<*PROTECT>
%   \fi
%   \iffalse
\documentclass{UWMadThesisL3Doc}
%
    \DeclareDocumentCommand \LaTeXPL { } {%
        \texttt{expl3}%
    }
%
%
    \setcounter{page}{-1000}
%
%
    \Title{UWMadThesis Class Manual}
    \Author{Troy Christopher Haskin}
%s
%
    \EnableCrossrefs
    \RecordChanges
    \CodelineIndex

    \begin{document}

% ============================================= %
%                   Title Page                  %
% ============================================= %
            \newgeometry{
                marginparwidth = 0in,
                left           = 0.25in,
                right          = 0.25in,
                bottom         = 1.00in,
                top            = 1.00in,
            }
            \thispagestyle{empty}
            \null\vfill
            \begin{center}
                {
                    \huge
                    \texttt{UWMadThesis} Class Manual
                }
                \vskip0.25in
                {
                    \Large
                    \TheAuthor{}
                }
                \vskip2in
                \vfill
            \end{center}
        \clearpage
        \restoregeometry

% ============================================= %
%                      TOC                      %
% ============================================= %
        \pagenumbering{roman}
        \TableOfContents
        \DocInput{\jobname.dtx}
    \end{document}
%
%   \fi
%
%
% \CheckSum{0}
%
%   \CharacterTable
%   {Upper-case \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%    Lower-case \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%    Digits     \0\1\2\3\4\5\6\7\8\9
%    Exclamation   \!    Double quote \"     Hash (number) \#
%    Dollar        \$    Percent      \%     Ampersand     \&
%    Acute accent  \'    Left paren   \(     Right paren   \)
%    Asterisk      \*    Plus         \+     Comma         \,
%    Minus         \-    Point        \.     Solidus       \/
%    Colon         \:    Semicolon    \;     Less than     \<
%    Equals        \=    Greater than \>     Question mark \?
%    Commercial at \@    Left bracket \[     Backslash     \\
%    Right bracket \]    Circumflex   \^     Underscore    \_
%    Grave accent  \`    Left brace   \{     Vertical bar  \|
%    Right brace   \}    Tilde \~}
%
%   \input{UWMadThesis.Documentation.IndexExclusions.dtx}
%   \input{UWMadThesis.Documentation.ChangeLog.dtx}
%   \input{UWMadThesis.UserGuide.dtx}
%
%   \StopEventually{
%       \clearpage
%       \renewcommand{\glossaryname}{Change History}
%       \PrintChanges
%       \clearpage
%       \newgeometry{
%           marginparwidth = 0in,
%           left           = 0.25in,
%           right          = 0.25in,
%           bottom         = 1.00in,
%           top            = 1.00in,
%       }
%       \PrintIndex
%   }
%
%
%
%
%
%^^A ==================================================== !
%^^A                                                      !
%^^A                    BEGIN IMPLEMENTATION              !
%^^A                                                      !
%^^A ==================================================== !
%
%   \iffalse
%</PROTECT>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWPart{Implementation}
%   \UWModule{Front Matter}
%
%   Much of this class is written using the \LaTeX3 Programming Layer;
%   this will be denoted as \LaTeXPL{}.  The \LaTeXPL{} is the first
%   piece of a new system designed to succeed \LaTeXe{} in the future.
%   However, while the programming layer is solid and remarkable,
%   a lot of presentation work still needs to be done.  Therefore,
%   this class uses \LaTeXe{} code where necessary and will hopefully
%   be slowly pulled out as needed.  The good news is that since everything
%   is more-or-less an abstraction of \TeX{}, it should work together well.
%
%   \UWSubModule{expl3 Package and Identification}
%   The |expl3| package loads the \LaTeXPL{} and is therefore required.
%   If the package is not recent enough, the class aborts and requests
%   the user update.
%    \begin{macrocode}
\RequirePackage{expl3}[2013/07/28]
\@ifpackagelater{expl3}{2013/07/28} {} {%
    \PackageError{UWMadThesis}{Version of l3kernel is too old}
      {%
        Please install an up to date version of l3kernel\MessageBreak
        using your TeX package manager or from CTAN.
      }%
    \endinput
}%
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}
%
%
%   \UWSubModule{Identification and Defaults}
%
%   If the |expl3| package is recent enoughw, define some identification
%   variables (token lists).
%    \begin{macrocode}
\tl_const:Nn \c__UWMad_Class_Name_tl        {UWMadThesis}
\tl_const:Nn \c__UWMad_Class_Version_tl     {1.0}
\tl_const:Nn \c__UWMad_Class_Date_tl        {2014/04/01}
\tl_const:Nn \c__UWMad_Class_Description_tl {
    LaTeX2e+~Thesis~Class~for~UW-Madison
}
\tl_const:Nn \c__UWMad_UniversityLong_tl   {University~of~Wisconsin--Madison}
\tl_const:Nn \c__UWMad_UniversityShort_tl  {UW--Madison}
%    \end{macrocode}
%
%   Assuming the the |expl3| package is recent enough, we provide the class
%   using the \LaTeXPL{}'s provide function.
%    \begin{macrocode}
\ProvidesExplClass
    {\c__UWMad_Class_Name_tl}   {\c__UWMad_Class_Date_tl}
    {\c__UWMad_Class_Version_tl}{\c__UWMad_Class_Description_tl}
%    \end{macrocode}
%
%
%
%   In an effort to allow the thesis class to adapt to new underlying classes,
%   the class that the \UWMadClass{} loads is decalred as a mutable
%   token list.  The default is the \LaTeX{} base class \texttt{report}.
%    \begin{macrocode}
\tl_new:N   \g_UWMad_ParentClass_tl
\tl_gset:Nn \g_UWMad_ParentClass_tl {report}
%    \end{macrocode}
%
%
%
%   \UWSubModule{Options}
%
%
%   First, a command is created to throw a warning if an option that
%   violates \UWMadLong{}'s dissertation guidelines is chosen.
%    \begin{macrocode}
\msg_new:nnn{ UWMadThesis }{ Options / StyleViolation }{
    Option~'#1'~violates~\c_UWMadUniversityShort_tl{}~
    Dissertation~Guidelines;~consider~omission
}
\cs_new:Nn \__UWMad_FrontMatter_StyleWarning:n {
    \msg_warning:nnn { UWMadThesis }{ Options / StyleViolation } { #1 }
   \PassOptionsToClass{#1}{\g_UWMad_ParentClass_tl}
}
%    \end{macrocode}
%
%
%
%   Now, declare booleans for the option processing.  All new booleans
%   are false by default.
%    \begin{macrocode}
\bool_new:N       \g__UWMad_MathTweaks_bool
\bool_gset_true:N \g__UWMad_MathTweaks_bool
%    \end{macrocode}
%
%   Declare the options.
%    \begin{macrocode}
\DeclareOption{NoMath} {
    \bool_gset_false:N \g__UWMad_MathTweaks_bool
}
\DeclareOption{Quiet} {
    \msg_redirect_module:nnn { UWMadThesis } { warning } { none }
}
%    \end{macrocode}
%
%
%   These options change the default report class to the
%   ones indicated.
%    \begin{macrocode}
\DeclareOption{article} {
    \tl_gset:Nn \g_UWMad_ParentClass_tl {article}
}
%    \end{macrocode}
%
%   Catch the couple of default options that violate the requirements:
%   8.5 by 11 paper for single-sided printing.
%    \begin{macrocode}
\DeclareOption{a4paper} {
    \__UWMad_FrontMatter_StyleWarning:n {\CurrentOption}
}
\DeclareOption{twoside} {
    \__UWMad_FrontMatter_StyleWarning:n {\CurrentOption}
}
%    \end{macrocode}
%
%   This is a special class option for generating the documentation.
%   Users should not use this unless they know what they're doing.
%   The line below the \texttt{ParentClass} class prevents the \pkg{thumbpdf}
%   package from being loaded.
%    \begin{macrocode}
\DeclareOption{l3doc} {
    \tl_gset:Nn \g_UWMad_ParentClass_tl {l3doc}
    \tl_const:cn {ver@thumbpdf.sty} {}
}
%    \end{macrocode}
%
%   Pass all remaining options to the base class.
%    \begin{macrocode}
\DeclareOption*{
    \PassOptionsToClass {
        \CurrentOption
    } {
        \g_UWMad_ParentClass_tl
    }
}
%    \end{macrocode}
%
%   Process the options with some defaults and load the base class.
%    \begin{macrocode}
\ExecuteOptions{oneside,12pt}
\ProcessOptions\relax
\LoadClass{\g_UWMad_ParentClass_tl}[1995/12/01]
%    \end{macrocode}
%
%
%
%   \UWSubModule{Package Loads}
%   Load some packages that give nice features and are not
%   hyperlink sensitive.
%    \begin{macrocode}
\RequirePackage{xparse}
\RequirePackage{fixltx2e}
\RequirePackage{microtype}
\RequirePackage{array}
\RequirePackage{float}
\RequirePackage{graphicx}
\RequirePackage{setspace}
\RequirePackage{geometry}
%    \end{macrocode}
%
%
%   Load the \AmS{} suite.
%    \begin{macrocode}
\RequirePackage{amsmath}
\RequirePackage{amsfonts}
\RequirePackage{amssymb}
\RequirePackage{mathtools}
%    \end{macrocode}
%
%   And now we load some packages that give nice features and are
%   hyperlink sensitive.
%    \begin{macrocode}
\RequirePackage[noabbrev,nameinlink]{cleveref}
\RequirePackage[usenames,dvipsnames,svgnames,table,hyperref]{xcolor}
\RequirePackage{caption}
\RequirePackage{subcaption}
%    \end{macrocode}
%
%
%   Conditionally load either the \pkg{polyglossia} or \pkg{babel}
%   language packages depending on the engine in use.
%    \begin{macrocode}
\bool_if:nTF {\xetex_if_engine_p: || \luatex_if_engine_p:} {
    \RequirePackage{fontspec}
    \defaultfontfeatures{Ligatures={TeX}}
    \setmainfont
        [SmallCapsFont = {Latin~Modern~Roman~Caps}]
        {Latin~Modern~Roman}
%
    \RequirePackage{polyglossia}
    \setmainlanguage[variant = usmax]{english}
} {
    \RequirePackage{lmodern}
    \RequirePackage[T1]{fontenc}
%
    \RequirePackage[english]{babel}
}
%    \end{macrocode}
%
%
%   If links were not negated by the options, \pkg{bookmark} and
%   \pkg{hyperref} are loaded.
%    \begin{macrocode}
\RequirePackage{hyperref}
\RequirePackage{bookmark}
%    \end{macrocode}
%
%
%
%
%   And since these identifications may be desired in typsetting more,
%   where \LaTeXPL{}'s syntax will be turned off, we define some aliases.
%    \begin{macrocode}
\DeclareDocumentCommand \UWMadClass { } {
    \texttt{\c__UWMad_Class_Name_tl}~class
}
\DeclareDocumentCommand \UWMadClassVersion { } {
    \c__UWMad_Class_Version_tl
}
\DeclareDocumentCommand \UWMadClassDate { } {
    \c__UWMad_Class_Date_tl
}
\DeclareDocumentCommand \UWMadLong { } {
    \c__UWMad_UniversityLong_tl
}
\DeclareDocumentCommand \UWMadShort { } {
    \c__UWMad_UniversityShort_tl
}
%    \end{macrocode}
%
%
%
%
%
%
%
%
%   \UWSubModule{Key-Value Interface}
%
%   \begin{function}{\UWMadSetup}
%       \begin{syntax}
%           \cs{UWMadSetup}\Arg{option list}
%       \end{syntax}
%   This simple command creates a user interface for the key-value system used
%   for several feature set options.
%    \begin{macrocode}
\cs_generate_variant:Nn \keys_set:nn {nf}
\tl_new:N \l__UWMad_Setup_ModuleName_tl
\clist_new:N \l__UWMad_Setup_OptionList_clist
\cs_new:Nn \__UWMad_Setup_ProcessInput:n {
    \seq_set_split:Nnn \l_tmpa_seq {,} {#1}
    \seq_map_inline:Nn \l_tmpa_seq {
        \seq_set_split:Nnn \l_tmpb_seq {/} {##1}
        \seq_pop:NN \l_tmpb_seq \l__UWMad_Setup_ModuleName_tl
        \seq_pop:NN \l_tmpb_seq \l__UWMad_Setup_OptionList_clist
        \clist_map_inline:Nn \l__UWMad_Setup_OptionList_clist {
            \tl_set:Nx \l_tmpa_tl {
                \l__UWMad_Setup_ModuleName_tl / \tl_trim_spaces:n{####1}
            }
            \exp_args:Nnf
                \keys_set:nn { UWMadThesis } { \l_tmpa_tl }
        }
    }
}
\DeclareDocumentCommand \UWMadSetup { m } {
    \__UWMad_Setup_ProcessInput:n{#1}
}
%    \end{macrocode}
%   \end{function}
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%   \UWModule{Programming}\label{Imp/Programming}
%   This section outlines the Programming module for the \UWMadClass{}.
%   It encompasses thin abstractions from the standard \LaTeXPL{}'s type
%   and collection systems and provides \LaTeXe{} abstractions for
%   several other features.
%
%
%
%   \UWSubModule{Utility Commands}
%
%   Define some messages for the rest of the module.
%    \begin{macrocode}
\msg_new:nnn {UWMadThesis} {Programming/UnregisteredVariable} {
    `#1'~is~not~a~registered~#2.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_DefineLocal:n~or~
    \string\UWMad_#2_DefineGlobal:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Undefined} {
    The~#2~`#1'~is~undefined.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_Define:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Defined} {
    The~#2~`#1'~is~already~defined~and~will~not~altered.
}
%    \end{macrocode}
%
%
%
%   \begin{function} {
%       \UWMad_Hook_Prepend:cn,
%       \UWMad_Hook_Prepend:Nn}
%       \begin{syntax}
%           \cs{UWMad_Hook_Prepend:cn} \Arg{command name} \Arg{prepend code}
%           \cs{UWMad_Hook_Prepend:Nn} \meta{command} \Arg{prepend code}
%       \end{syntax}
%
%   These commands allow additional code to be prepended to a
%   specified command.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hook_Prepend:cn {
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}         {#2 \cs:w #1-Default:\cs_end:}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Prepend:Nn {
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {#2 \cs:w\string#1-Default:\cs_end:}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function} {
%       \UWMad_Hook_Append:cn,
%       \UWMad_Hook_Append:Nn}
%       \begin{syntax}
%           \cs{UWMad_Hook_Append:cn} \Arg{command name} \Arg{append code}
%           \cs{UWMad_Hook_Append:Nn} \meta{command} \Arg{append code}
%       \end{syntax}
%
%   These commands allow additional code to be appended to a
%   specified command.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hook_Append:cn {
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}        {\cs:w #1-Default:\cs_end: #2}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Append:Nn {
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {\cs:w\string#1-Default:\cs_end: #2}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%   \begin{function} {
%       \UWMad_Definition_Swap:Nn,
%       \UWMad_Definition_Reset:N,
%       \UWMad_Definition_Swap:cn,
%       \UWMad_Definition_Reset:c}
%
%       \begin{syntax}
%           \cs{UWMad_Definition_Swap:Nn} \meta{command} \Arg{replacement code}
%           \cs{UWMad_Definition_Reset:N} \meta{command}
%           \cs{UWMad_Definition_Swap:cn} \Arg{command name} \Arg{replacement code}
%           \cs{UWMad_Definition_Reset:c} \Arg{command name}
%       \end{syntax}
%
%   These commands \enquote{swap} in a new definition of a command and,
%   when called, reset it to it's default definition.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Definition_Swap:Nn {
    \cs_if_exist:NTF #1 {
        \cs_new_eq:cN  {\string#1-Default:}  #1
        \cs_gset_eq:Nc  #1 {#2}
    } {
        \cs_new:Nn #1 {#2}
    }
}
\cs_new:Nn \UWMad_Definition_Reset:N {
    \cs_if_exist:cTF {\string#1-Default:} {
        \cs_gset_eq:Nc  #1              {\string#1-Default:}
        \cs_undefine:c  {\string#1-Default:}
    } { }
}
\cs_generate_variant:Nn \UWMad_Definition_Swap:Nn {cn}
\cs_generate_variant:Nn \UWMad_Definition_Reset:N {c}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%
%   \begin{function}{
%       \UWMad_File_GetExtension:nNN}
%   \begin{syntax}
%   \cs{UWMad_File_GetExtension:nNN}\Arg{path}\meta{tl var 1}\meta{tl var 2}
%   \end{syntax}
%   Searches through the given \Arg{file path} for an extension identifier
%   (\texttt{.} by default) in the path.  If one is found, the path sans extension is
%   assigned to \meta{tl var 1} with the extension assigned to \meta{tl var 2}.
%
%   Initializations of variables and booleans used in the function
%    \begin{macrocode}
\tl_new:N   \g__UWMad_File_Path_tl
\tl_new:N   \g__UWMad_File_Extension_tl
\tl_new:N   \g__UWMad_File_Marker_Extension_tl
\tl_new:N   \g__UWMad_File_Marker_Directory_tl
\tl_gset:Nn \g__UWMad_File_Marker_Extension_tl {.}
\tl_gset:Nn \g__UWMad_File_Marker_Directory_tl {/}
\bool_new:N \g__UWMad_File_IsExtensionFound_bool
\bool_new:N \g__UWMad_File_IsDirectoryFound_bool
%    \end{macrocode}
%
%   Define the body of the function.
%    \begin{macrocode}
\cs_new:Nn \UWMad_File_GetExtension:nNN {

    \tl_gclear:N \g__UWMad_File_Path_tl
    \tl_gclear:N \g__UWMad_File_Extension_tl
    \bool_set_false:N \g__UWMad_File_IsExtensionFound_bool
    \bool_set_false:N \g__UWMad_File_IsDirectoryFound_bool

    \tl_set:Nx \l_tmpa_tl {
        \tl_reverse:V {#1}
    }

\tl_map_inline:Nn \l_tmpa_tl {

    \tl_set:Nn {\l_tmpb_tl}{##1}

    \bool_if:NTF \g__UWMad_File_IsExtensionFound_bool {
        \tl_gput_left:Nn \g__UWMad_File_Path_tl {##1}
    } {
        \bool_if:NTF \g__UWMad_File_IsDirectoryFound_bool {
            \tl_gput_left:Nn \g__UWMad_File_Path_tl {##1}
        } {
            \tl_if_eq:NNTF \l_tmpb_tl \g__UWMad_File_Marker_Extension_tl {
                \bool_set_true:N \g__UWMad_File_IsExtensionFound_bool
            } {
                \tl_if_eq:NNTF \l_tmpb_tl \g__UWMad_File_Marker_Directory_tl {
                    \bool_gset_true:N \g__UWMad_File_IsDirectoryFound_bool
                    \tl_gput_left:Nn \g__UWMad_File_Path_tl {##1}
                } {
                    \tl_gput_left:Nn \g__UWMad_File_Extension_tl {##1}
                }
            }
        }
    }
}

    \bool_if:NTF \g__UWMad_File_IsExtensionFound_bool { } {
        \tl_gput_right:NV \g__UWMad_File_Path_tl {
            \g__UWMad_File_Extension_tl
        }
        \tl_gclear:N \g__UWMad_File_Extension_tl
    }

    \tl_gset_eq:NN
        #2
        \g__UWMad_File_Path_tl
    \tl_gset_eq:NN
        #3
        \g__UWMad_File_Extension_tl
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%   \begin{function}{
%       \__UWMad_IfDefined:nnnnT,
%       \__UWMad_IfUndefined:nnnnT}
%
%   \begin{syntax}
%       \cs{__UWMad_IfDefined:nnnnT}\Arg{Prefix}\Arg{ID}\Arg{Suffix}\Arg{Type}\Arg{Code}
%       \cs{__UWMad_IfUndefined:nnnnT}\Arg{Prefix}\Arg{ID}\Arg{Suffix}\Arg{Type}\Arg{Code}
%   \end{syntax}
%
%   These commands accept a \marg{Prefix}, an \marg{ID}, a \marg{Suffix},
%   a \marg{Type}, and \marg{Code}.  It determines if a command named by the
%   concatenation of \marg{Prefix}, \marg{ID}, and \marg{Suffix}
%   is defined or not and executes \marg{Code} depending on the existence.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nnnnT{
    \cs_if_exist:cTF {#1#2#3} {
        #5
    }{
            \msg_error:nnnn
                {UWMadThesis}
                {Programming/Undefined}
                {#2}
                {#4}
    }
}
\cs_new:Nn \__UWMad_IfUndefined:nnnnT{
    \cs_if_free:cTF {#1#2#3} {
        #5
    }{
            \msg_warning:nnnn
                {UWMadThesis}
                {Programming/Defined}
                {#2}
                {#4}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{
%       \__UWMad_IfDefined:nT,
%       \__UWMad_IfUndefined:nT}
%   \begin{syntax}
%       \cs{__UWMad_IfDefined:nT}\Arg{CommandName}\Arg{TrueCode}
%       \cs{__UWMad_IfUndefined:nT}\Arg{CommandName}\Arg{TrueCode}
%   \end{syntax}
%   These commands are simplifications of the above commands and
%   that only take a \marg{CommandName} and \marg{TrueCode}.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nT{
    \_UWMad_IfDefined:nnnnT{}{#1}{}{command}{#2}
}
\cs_new:Nn \__UWMad_IfUndefined:nT{
    \_UWMad_IfUndefined:nnnnT{}{#1}{}{command}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%^^A ======================================================================= %
%^^A                     Collection Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubModule{Collections}
%   In the following subsections, commands that create and manipulate
%   various collection data types will be discussed.  The collections
%   currently implemented are stacks (LIFO),
%   queues (FIFO), deques (LIFO+FIFO), and hashes (key-value pairs).
%
%   All of the collection systems are thin abstractions of \LaTeXPL{}'s
%   \texttt{l3tl}, \texttt{l3seq}, and \texttt{l3prop} modules to avoid developing
%   one-shot systems while allowing more endeavoring authors access to the
%   features without learning \LaTeX3{} programming if they load the
%   abstractions.
%
%
%
%
%
%
%^^A ======================================================================= %
%^^A                          Stack Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Stacks}
%   This set of commands is a simple system for creating and working with
%   stacks.  Stacks are a last-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) last
%   pushed on to the stack is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a LIFO sense.
%
%
%
%   \begin{function}{
%       \__UWMad_Stack_IfDefined:nT,
%       \__UWMad_Stack_IfUndefined:nT}
%       \begin{syntax}
%           \cs{__UWMad_Stack_IfDefined:nT}\Arg{stack name}\Arg{true code}
%           \cs{__UWMad_Stack_IfUndefined:nT}\Arg{stack name}\Arg{true code}
%       \end{syntax}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Stack_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
\cs_new:Nn \__UWMad_Stack_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Define:n}
%   Define a new Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Define:n {
    \__UWMad_Stack_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Clear:n}
%   Clear but do not undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Clear:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Delete:n}
%   Clear and undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Delete:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
        \cs_undefine:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Push:nn}
%   Push a value on to a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Push:nn {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Stack_#1} {#2}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Pop:n}
%   Pop a value off a defined Stack and place it in the
%   input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Pop:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_set:Nf \l_tmpa_tl          {\tl_head:c {g__UWMad_Stack_#1}}
        \tl_set:cf {g__UWMad_Stack_#1} {\tl_tail:c {g__UWMad_Stack_#1}}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Walk:nn}
%   Iterate of the elements of a defined Stack in a FILO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Walk:nn {
    \tl_map_inline:cn {g__UWMad_Stack_#1} {#2}
}
%    \end{macrocode}
%    \end{function}
%
%
%
%^^A ======================================================================= %
%^^A                          Queue Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Queues}
%   This set of commands is a simple system for creating and working with
%   queue.  Queues are a first-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) first
%   pushed on to the queue is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a FIFO sense.
%
%
%
%   \begin{function} {
%       \__UWMad_Queue_IfDefined:nT,
%       \__UWMad_Queue_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Queue_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
\cs_new:Nn \__UWMad_Queue_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Define:n}
%   Define a new Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Define:n {
    \__UWMad_Queue_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Clear:n}
%   Clear but do not undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Clear:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Delete:n}
%   Clear and undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Delete:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c    {g__UWMad_Queue_#1}
         \cs_undefine:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Pop:nn}
%   Push an item on to the start of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Push:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Queue_#1} {{#2}}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Pop:n}
%   Pop an item from the end of a defined Queue
%   and place it in the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Pop:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_set:Nf \l_tmpa_tl
            {\tl_head:c {g__UWMad_Queue_#1}}
        \tl_set:cf      {g__UWMad_Queue_#1}
            {\tl_tail:c {g__UWMad_Queue_#1}}
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Walk:nn}
%   Iterate of the elements of a defined Queue in a FIFO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Walk:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \group_begin:
            \tl_reverse:c     {g__UWMad_Queue_#1}
            \tl_map_inline:cn {g__UWMad_Queue_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_IfEmpty:nTF}
%   Execute true/false code depending on the emptiness
%   of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_IfEmpty:nTF {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_if_empty:cTF {g__UWMad_Queue_#1}{
            #2
        }{
            #3
        }
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%^^A ======================================================================= %
%^^A                          Deque Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Deques}
%   This set of commands is a simple system for creating and working with
%   double-ended queues (deques, pronounced \textit{deck}).  Deques are a
%   generalization of stacks and queues in that data can be pushed, popped,
%   and walked from either end of the list (i.e., LIFO+FIFO).
%
%
%
%   \begin{function} {
%       \__UWMad_Deque_IfDefined:nT,
%       \__UWMad_Deque_IfUndefined:nT}
%   Shortcuts for the more general  commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Deque_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
\cs_new:Nn \__UWMad_Deque_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Define:n}
%   Define a new Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Define:n {
    \__UWMad_Deque_IfUndefined:nT {#1} {
        \seq_new:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Clear:n}
%   Clear but do not undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Clear:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Delete:n}
%   Clear and undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Delete:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
        \cs_undefine:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_PushLeft:nn,
%       \UWMad_Deque_PushRight:nn}
%   Push an element on to the left or right of a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PushLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_left:cn  {g__UWMad_Deque_#1} {#2}
    }
}
\cs_new:Nn \UWMad_Deque_PushRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_right:cn {g__UWMad_Deque_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_PopLeft:nn,
%       \UWMad_Deque_PopRight:nn}
%   Pop an element from the left or right of a defined Deque
%   and place it into the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PopLeft:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_left:cN  {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
\cs_new:Nn \UWMad_Deque_PopRight:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_right:cN {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_WalkLeftToRight:nn,
%       \UWMad_Deque_WalkRightToLeft:nn}
%   Iterate over the elements left-to-right or right-to-left
%   of a defined Deque with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_WalkLeftToRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
    }
}
\cs_generate_variant:Nn \seq_reverse:N {c}
\cs_new:Nn \UWMad_Deque_WalkRightToLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \group_begin:
            \seq_reverse:c     {g__UWMad_Deque_#1}
            \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%^^A =========================================================================== %
%^^A                 Hashes (Associative Arrays) with LaTeX3                     %
%^^A =========================================================================== %
%
%   \UWSubSubModule{Hashes}
%   This set of commands is a simple system for creating and working with
%   hashes (more often called associative arrays or dictionaries, but erring
%   on the side of usablility, Ruby's jargon will be used). Hashes are a
%   type of array that indexes values by (at least in \LaTeX{}) alphanumeric
%   keys instead of just integers.
%   Data can be set by key, retrieved by key, unset by key, deleted, and walked.
%
%   A hash walk, like the collection walks above, iterates through all of the
%   keys and values in the hash while applying a user supplied function.
%   However, unlike the collection walks, \textbf{a hash's walk order is not
%   gauranteed to be the set order}.  If walk order is needed to be
%   gauranteed, see the previous collection data types.
%
%   The system is a thin abstraction of \LaTeXPL's
%   \texttt{l3prop} module to avoid developing a one-shot system while allowing more
%   endeavoring authors access to the feature without learning \LaTeX3{}
%   programming.
%
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_gput:Nnn   { c x n   }
\cs_generate_variant:Nn \prop_if_in:NnTF { c x TF  }
\cs_generate_variant:Nn \prop_if_in:NnTF { c f TF  }
\cs_generate_variant:Nn \prop_get:Nn     { c x     }
\cs_generate_variant:Nn \prop_get:Nn     { c f     }
\cs_generate_variant:Nn \prop_get:NnNTF  { c x N TF}
\cs_generate_variant:Nn \prop_gremove:Nn { c x     }
%    \end{macrocode}
%
%
%   \begin{function} {
%       \__UWMad_Hash_IfDefined:nT,
%       \__UWMad_Hash_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Hash_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
\cs_new:Nn \__UWMad_Hash_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Define:n}
%   Define a new Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Define:n {
    \__UWMad_Hash_IfUndefined:nT {#1} {
        \prop_new:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Set:nnn}
%   Set the value of a key of a defined Hash.
%
%   \begin{syntax}
%       \cs{UWMad_Hash_Set:nnn}\marg{HashID}\marg{Key}\marg{Value}
%   \end{syntax}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Set:nnn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gput:cxn {g__UWMad_Hash_#1}{#2}{#3}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Get:nn}
%   Get the value of a key of a defined Hash and place
%   it into the input stream.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_get:cn {cf}
\cs_new:Nn \UWMad_Hash_Get:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_get:cf {g__UWMad_Hash_#1}{#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Unset:nn}
%   Undefine a key-value pair in a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Unset:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gremove:cx {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_IfKeySet:nnTF}
%   Execute true/false code depending on if a key is set in
%   a defined Hash.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_to_lowercase:n {f}
\cs_new:Nn \UWMad_Hash_IfKeySet:nnTF {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_if_in:cfTF {g__UWMad_Hash_#1} {\tl_trim_spaces:n{#2}} {
            #3
        }{
            #4
        }
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Walk:nn}
%   Iterate over the key-value pairs of a defined Hash with
%   supplied code. \textbf{No order is gauranteed.}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Walk:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_map_inline:cn {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Delete:n}
%   Clear and undefine a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Delete:n {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gclear:c {g__UWMad_Hash_#1}
        \cs_undefine:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%^^A ==================================================================== %
%^^A                         LaTeX2e Abstractions                         %
%^^A ==================================================================== %
%
%   \UWSubModule{User-Level Abstractions}
%
%   The commands that follow are \LaTeXe{}-like commands that use the
%   \LaTeXPL{} as the underlying system.  \textbf{The commands are not loaded
%   by default; they must be invoked by calling the following command.}
%
%
%   \UWSubSubModule{Utility Commands}
%
%
%   \begin{function}{\IfCommandExists,\IfCommandDoesNotExist}
%   This command pair is used instead of \LaTeX{}'s \cs{@ifundefined}.
%   Since it is \eTeX{}, this command will allow for a switch to
%   \cs{@ifundefined} if problems arise from non-\eTeX{} users in the
%   future.
%
%   \begin{syntax}
%       \cs{IfCommandExists}\marg{Command Name}\marg{True}\marg{False}
%       \cs{IfCommandDoesNotExist}\marg{Command Name}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandExistsTF { m +m +m } {
    \cs_if_exist:cTF {#1}{
        #2
    }{
        #3
    }
}
\DeclareDocumentCommand \IfCommandDoesNotExistTF { m +m +m } {
    \cs_if_free:cTF {#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\IfStringEmpty}
%   Checks if a given string is composed of no characters or just blank spaces.
%
%   \begin{syntax}
%       \cs{IfStringEmpty}\marg{String}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_blank:nTF {fTF}
\DeclareDocumentCommand \IfEmptyTF { m +m +m } {
    \tl_if_blank:fTF {#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\IfCommandEmpty}
%   Determines if a commands contains no or only space after one expansion.
%
%   \begin{syntax}
%       \cs{IfCommandEmpty}\marg{Command}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandEmptyTF { m +m +m }{
    \tl_if_blank:oTF{#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%
%^^A ==================================================================== %
%^^A                      Command Creator System                          %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Command Creators}
%
%
%   \begin{function}{\MakeCommand,\ReMakeCommand}
%   If the requested command is not defined, \cs{MakeCommand} will create it;
%   however, if the requested command is already defined, \cs{MakeCommand} will
%   throw a warning and not make the command.
%   If the requested command is defined, \cs{ReMakeCommand} will redefine it;
%   however, if the requested command is not defined, \cs{ReMakeCommand} will
%   throw a warning and not make the command.
%
%   \begin{syntax}
%       \cs{MakeCommand}\marg{Command Name}\marg{Code}
%       \cs{ReMakeCommand}\marg{Command Name}\marg{Code}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommand { O{} m +m } {
    \cs_if_free:cTF {#2} {
        \cs_set:cpn {#2} #1 {#3}
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{#2}{command}
    }
}
\DeclareDocumentCommand \ReMakeCommand { O{} m +m }{
    \cs_if_exist:cTF {#2} {
        \cs_set:cpn {#2} #1 {#3}
    }{
        \msg_error:nnnn
            {UWMadThesis}{Programming/Undefined}{#2}{command}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\MakeGlobalCommand}
%   Similar to \cs{MakeCommand} except the creation is made regardless of the
%   requested command's definition and the creation is global.
%
%   \begin{syntax}
%       \cs{MakeGlobalCommand}\marg{Command Name}\marg{Code}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeGlobalCommand { O{} +m m } {
    \cs_gset:cpn {#2} #1 {#3}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\MakeCommandUndefined}
%   Globally undefines the command specified by \marg{Command Name}.
%
%   \begin{syntax}
%       \cs{MakeCommandUndefined}\marg{Command Name}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommandUndefined { m } {
    \cs_undefine:c {#1}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\CopyCommand}
%   Copies the defintion of the command named \marg{Command Name 1} to
%   a new command named \marg{Command Name 2}.  If \marg{Command Name 2}
%   already has a definition, \cs{CopyCommand} will throw a warning
%   \emph{but} still make the copy.
%
%   \begin{syntax}
%       \cs{CopyCommand}\marg{Command Name 1}\marg{Command Name 2}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \CopyCommand { m m } {
    \cs_if_free:cTF {#1} {
        \cs_if_free:cTF {#2} {
            \cs_gset_eq:cc {#2}{#1}
        }{
            \msg_warning:nnnn
                {UWMadThesis}{Programming/Defined}{#2}{command}
        }
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{#1}{command}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%   \UWSubSubModule{Types}
%
%   \begin{function}{
%       \CreateBoolean,
%       \CreateBooleanTrue,
%       \CreateBooleanFalse,
%       \SetBooleanTrue,
%       \SetBooleanFalse,
%       \IfBooleanTrueTF,
%       \IfBooleanFalseTF}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateBoolean { m } {
    \bool_new:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \CreateBooleanTrue { m } {
    \bool_new:c       {g__UWMad_Programming_API_#1_bool}
    \bool_gset_true:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \CreateBooleanFalse { m } {
    \bool_new:c        {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \SetBooleanTrue { m } {
    \bool_gset_true:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \SetBooleanFalse { m } {
    \bool_gset_false:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \IfBooleanTrueTF { m +m +m } {
    \bool_if:cTF {g__UWMad_Programming_API_#1_bool} {
        #2
    } {
        #3
    }
}
\DeclareDocumentCommand \IfBooleanFalseTF { m +m +m } {
    \bool_if:cTF {g__UWMad_Programming_API_#1_bool} {
        #3
    } {
        #2
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%   \begin{function}{
%       \CreateLength,
%       \AddToLength,
%       \SetLength,
%       \ValueOfLength,
%       \IfLengthTF}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateLength { m m } {
    \dim_new:c   {g__UWMad_Programming_API_#1_dim}
    \dim_gset:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \AddToLength { m m } {
    \dim_gadd:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \SetLength { m m } {
    \dim_gset:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \ValueOfLength { m } {
    \dim_use:c {g__UWMad_Programming_API_#1_dim}
}
\DeclareDocumentCommand \IfLengthTF { m m m +m +m } {
    \dim_compare:nNnTF {#1} #2 {#3} {
        #4
    } {
        #5
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%   \begin{function}{
%       \CreateCounter,
%       \AddToCounter,
%       \StepCounter,
%       \SetCounter,
%       \ValueOfCounter,
%       \IfCounterTF,
%       \CounterToArabic,
%       \CounterToALPHA,
%       \CounterToAlpha,
%       \CounterToROMAN,
%       \CounterToRoman}
%   \LaTeXe{} version of the Counter Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateCounter { m m } {
    \int_new:c   {g__UWMad_Programming_API_#1_int}
    \int_gset:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \AddToCounter { m m } {
    \int_gadd:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \StepCounter { m m } {
    \int_gincr:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \SetCounter { m m } {
    \int_gset:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \ValueOfCounter { m m } {
    \int_use:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \IfCounterTF { m m m +m +m } {
    \int_compare:nNnTF {#1} {#2} {#3} {
        #4
    } {
        #5
    }
}
\DeclareDocumentCommand \CounterToArabic { m } {
    \int_to_arabic:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToALPHA { m } {
    \int_to_Alph:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToAlpha { m } {
    \int_to_alph:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToROMAN { m } {
    \int_to_Roman:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToRoman { m } {
    \int_to_roman:c {g__UWMad_Programming_API_#1_int}
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWModule{Layout And Styles}
%
%
%   \UWSubModule{Float Styles}
%
%   Make equation references of the form (\#).
%    \begin{macrocode}
\creflabelformat{equation}{#2#1#3}
%    \end{macrocode}
%
%   Default table style
%       \begin{macrocode}
\captionsetup [table] {
    format        = hang                ,
    labelsep      = colon               ,
    justification = justified           ,
    labelfont     = sc                  ,
    textfont      = sl                  ,
    font          = {normal,stretch=1.1},
    width         = 0.9\textwidth       ,
    position      = above               ,
    skip          = 0.50em
}
%    \end{macrocode}
%
%   Default figure style.
%    \begin{macrocode}
\captionsetup [figure] {
    format        = hang                ,
    labelsep      = colon               ,
    justification = justified           ,
    labelfont     = sl                  ,
    textfont      = sl                  ,
    font          = {normal,stretch=1.1},
    width         = 0.9\textwidth       ,
    position      = above               ,
    skip          = 0.5em
}
%    \end{macrocode}
%
%
%
%
%
%
%   \UWSubModule{Links}
%
%   Define a darker green than |green|.
%    \begin{macrocode}
\definecolor{UWMadGreen}{rgb}{0,0.7,0}
%    \end{macrocode}
%
%   Define the default colors for the (internal) links, cites, and URLs.
%    \begin{macrocode}
\tl_new:N  \l_UWMad_LayoutStyle_Color_Link_tl
\tl_set:Nn \l_UWMad_LayoutStyle_Color_Link_tl {blue}
\tl_new:N  \l_UWMad_LayoutStyle_Color_Cite_tl
\tl_set:Nn \l_UWMad_LayoutStyle_Color_Cite_tl {UWMadGreen}
\tl_new:N  \l_UWMad_LayoutStyle_Color_URL_tl
\tl_set:Nn \l_UWMad_LayoutStyle_Color_URL_tl  {violet}
%    \end{macrocode}
%
%   Define a new color and hyperlink defaults
%    \begin{macrocode}
\hypersetup {
    colorlinks         = true,
    linkcolor          = \l_UWMad_LayoutStyle_Color_Link_tl,
    citecolor          = \l_UWMad_LayoutStyle_Color_Cite_tl,
    urlcolor           = \l_UWMad_LayoutStyle_Color_URL_tl,
    pdfdisplaydoctitle = true,
    pdfview            = {FitH},
    pdfstartview       = {FitH},
    pdfpagelayout      = OneColumn,
    plainpages         = false,
    hypertexnames      = true,
    bookmarksopenlevel = 1,
    bookmarksopen      = true,
    unicode            = true
}
%    \end{macrocode}
%
%   Define a helper commands to redefine all of the \pkg{hyperref}
%   link colors using this class's color token lists.
%    \begin{macrocode}
\cs_new:Nn \UWMad_LayoutStyle_ResetLinkColors: {
    \hypersetup {
        colorlinks = true,
        linkcolor  = \l_UWMad_LayoutStyle_Color_Link_tl,
        citecolor  = \l_UWMad_LayoutStyle_Color_Cite_tl,
        urlcolor   = \l_UWMad_LayoutStyle_Color_URL_tl
    }
}
%    \end{macrocode}
%
%   Define user interfaces to setting link colors.
%    \begin{macrocode}
\DeclareDocumentCommand \MakeLinksTheseColors { m m m } {
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_Link_tl {#1}
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_Cite_tl {#2}
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_URL_tl  {#3}
    \UWMad_LayoutStyle_ResetLinkColors:
}
\DeclareDocumentCommand \MakeLinksThisColor { m } {
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_Link_tl {#1}
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_Cite_tl {#1}
    \tl_set:Nn \l_UWMad_LayoutStyle_Color_URL_tl  {#1}
    \UWMad_LayoutStyle_ResetLinkColors:
}
%    \end{macrocode}
%
%   Define user interfaces to specialized color commands.
%    \begin{macrocode}
\keys_define:nn { UWMadThesis / LayoutStyle } {
    link-color .code:n = {
        \hypersetup {
            colorlinks = true,
            linkcolor  = #1,
        }
    },
    cite-color .code:n = {
        \hypersetup {
            colorlinks = true,
            citecolor  = #1,
        }
    },
    url-color .code:n = {
        \hypersetup {
            colorlinks = true,
            urlcolor  = #1,
        }
    },
    link-color .default:n = blue,
    cite-color .default:n = UWMadGreen,
    url-color  .default:n  = blue,
    all-link-color .code:n = {
        \hypersetup {
            colorlinks = true,
            linkcolor  = #1,
            citecolor  = #1,
            urlcolor   = #1,
        }
    },
    make-links-blue .meta:n = {
        all-link-color = blue
    },
    make-links-black .meta:n = {
        all-link-color = black
    },
    make-links-red .meta:n = {
        all-link-color = red
    }
}
\keys_set:nn { UWMadThesis / LayoutStyle } {
    link-color,
    cite-color,
    url-color
}
\DeclareDocumentCommand \MakeLinksBlack { } {
    \keys_set:nn { UWMadThesis / LayoutStyle } {
        make-links-black = true
    }
}
\DeclareDocumentCommand \MakeLinksBlue { } {
    \keys_set:nn { UWMadThesis / LayoutStyle } {
        make-links-blue = true
    }
}
\DeclareDocumentCommand \MakeLinksRed { } {
    \keys_set:nn { UWMadThesis / LayoutStyle } {
        make-links-red = true
    }
}
%    \end{macrocode}
%
%
%
%   \UWSubModule{Page Layout}
%
%   One inche magrins and letter (paper size) are set.
%    \begin{macrocode}
\geometry{
    includehead = true,
    margin      = 1.0in,
    paper       = letterpaper,
}
%    \end{macrocode}
%
%   Invoke `doublespacing' and set a warning in case any others invoke
%   the `not cool' commands according to the \UWMadShort{} Guidelines.
%    \begin{macrocode}
\doublespacing
\UWMad_Hook_Prepend:Nn \singlespacing {
    \__UWMad_FrontMatter_StyleWarning:n {
        University~guidelines~require~double-spacing.~
        If~this~is~for~temporary~use,~please~use~the~spacing~environment.
    }
}
\UWMad_Hook_Prepend:Nn \onehalfspacing {
    \__UWMad_FrontMatter_StyleWarning:n {
        University~guidelines~require~double-spacing.~
        If~this~is~for~temporary~use,~please~use~the~spacing~environment.
    }
}
%    \end{macrocode}
%
%   This setting puts the page numbers in the upper right-hand corner and
%   atleast one inch from the top and right sides of the page (per
%   the \UWMadShort{} guidelines).
%    \begin{macrocode}
\pagestyle{myheadings}
\setlength{\headsep}  {1.15em}
%    \end{macrocode}
%
%   Define user interface for defining different indentation styles.
%    \begin{macrocode}
\keys_define:nn { UWMadThesis / LayoutStyle } {
    indent-length .code:n = {
        \setlength{\parindent}{#1}
    },
    skip-length   .code:n = {
        \setlength{\parskip}{#1}
    },
    indent-length .default:n = 0pt,
    skip-length .default:n   = 1em,
    paragraph-style .choice:,
    paragraph-style / indent .code:n = {
        \setlength{\parindent}{1.50em}
        \setlength{\parskip}{0pt}
    },
    paragraph-style / pad    .code:n = {
        \setlength{\parindent}{0pt}
        \setlength{\parskip}{1em}
    }
}
\keys_set:nn { UWMadThesis / LayoutStyle } {
    paragraph-style = pad
}
%    \end{macrocode}
%
%
%   \iffalse
%</Code>
%   \fi

%\iffalse
%<*Code>
%\fi
%
%
%   \UWModule{Sectioning}
%
%
%
%^^A  =========================================================================== %
%^^A                     Redefinition of Chapter Commands                         %
%^^A  =========================================================================== %
%   Prefix some code such that \cs{chapter} has the page number in the
%   upper right-hand corner and ensures that the  page numbering is
%   arabic before the first unnumbered chapter is used.
%    \begin{macrocode}
\UWMad_Hook_Prepend:Nn \@chapter {
    \thispagestyle{myheadings}
    \int_compare:nNnTF {\value{chapter}} = {0} {
        \pagenumbering{arabic}
    } { }
}
\UWMad_Hook_Prepend:Nn \@schapter {
    \thispagestyle{myheadings}
}
%    \end{macrocode}
%^^A  =========================================================================== %
%^^A                           New Appendix Command                               %
%^^A  =========================================================================== %
%
%   \UWSubModule{Appendix}
%   Here the \cs{appendix} command is redefined to act like the
%   \cs{chapter} command.
%   Before, \cs{appendix} simply changed the \texttt{chaptername} to
%   \enquote{Appendix}.
%
%   Define the appendix counter.
%    \begin{macrocode}
\int_new:N  \g__UWMad_Appendix_Counter_int
\int_set:Nn \g__UWMad_Appendix_Counter_int {0}
%    \end{macrocode}
%
%   This command is used when the first \cs{appendix} command
%   is used.  It sets the \texttt{chaptername} to \enquote{Appendix}
%   and sets the \cs{thechapter} to use the appendix counter
%   above.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Appendix_Initialize:{
    \par
    \setcounter{section}{0}
    \cs_gset_eq:NN \@chapapp \appendixname
    \cs_gset:Npn \thechapter {
        \int_to_Alph:n {
            \g__UWMad_Appendix_Counter_int
        }
    }
}
%    \end{macrocode}
%
%   Now, \cs{appendix} is undefined (to avoide a warning from
%   \pkg{xparse}) and redefined with standard \LaTeXe{}
%   sectioning arguments.
%    \begin{macrocode}
\cs_undefine:N \appendix
\DeclareDocumentCommand \appendix { s o m } {

    \int_compare:nNnTF {\g__UWMad_Appendix_Counter_int} = {0} {
        \__UWMad_Appendix_Initialize:
    } { }
    \int_gincr:N \g__UWMad_Appendix_Counter_int

    \IfBooleanTF { #1 } {
        \chapter*{#3}
    } {
        \IfNoValueTF { #2 } {
            \chapter[#3]{#3}
        } {
            \chapter[#2]{#3}
        }
    }
}
%    \end{macrocode}
%
%
%   \UWSubModule{Front Matter}
%
%   Front Matter commands (sometimes called preliminary pages)
%   are defined here.  These are the sections of the document
%   the precede the main body of the work.
%
%   Initialize a counter for the FrontMatter.
%    \begin{macrocode}%
\int_new:N \g__UWMad_FrontMatter_Counter_int
%    \end{macrocode}
%
%   This command enters the Front Matter with a given name
%   and section level into the Table of Contents.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_FrontMatter_Register:nn {

    \int_compare:nNnTF {\g__UWMad_FrontMatter_Counter_int} = {0} {
        \pagenumbering{roman}
    } { }

    \int_gincr:N \g__UWMad_FrontMatter_Counter_int
    \addcontentsline
        {toc}
        {#1}
        {#2}
}
%    \end{macrocode}
%
%   These variables hold the default names of the Front Matter sections.
%    \begin{macrocode}
\tl_new:N   \g__UWMad_FrontMatter_Title_Dedications_tl
\tl_new:N   \g__UWMad_FrontMatter_Title_Acknowledgments_tl
\tl_new:N   \g__UWMad_FrontMatter_Title_Abstract_tl
\tl_new:N   \g__UWMad_FrontMatter_Title_UMIAbstract_tl
\tl_new:N   \g__UWMad_FrontMatter_Title_Preface_tl
%
\tl_gset:Nn \g__UWMad_FrontMatter_Title_Dedications_tl
    {Dedications}
\tl_gset:Nn \g__UWMad_FrontMatter_Title_Acknowledgments_tl
    {Acknowledgments}
\tl_gset:Nn \g__UWMad_FrontMatter_Title_Abstract_tl
    {Abstract}
\tl_gset:Nn \g__UWMad_FrontMatter_Title_UMIAbstract_tl
    {Abstract}
\tl_gset:Nn \g__UWMad_FrontMatter_Title_Preface_tl
    {Preface}
%    \end{macrocode}
%
%
%   First the \texttt{abstract} environment from the \LaTeX{} base class is
%   undefined, and the Front Matter commands as described in the User
%   Guide are defined.
%    \begin{macrocode}
\cs_undefine:N \abstract
\cs_undefine:N \endabstract

\DeclareDocumentCommand \FrontMatterSetSection { m m } {

    \tl_set_eq:Nc
        \l_tmpa_tl
        {g__UWMad_FrontMatter_Title_#2_tl}

    \IfNoValueTF { #1 } { } {
        \IfEmptyTF { #1 } { } {
            \tl_set:Nn \l_tmpa_tl {#1}
        }
    }

    \chapter*{\l_tmpa_tl}
    \__UWMad_FrontMatter_Register:nn {chapter} {
        \l_tmpa_tl
    }

}
\DeclareDocumentCommand \dedications { g } {
    \FrontMatterSetSection{#1}{Dedications}
}
\DeclareDocumentCommand \acknowledgments { g } {
    \FrontMatterSetSection{#1}{Acknowledgments}
}
\DeclareDocumentCommand \abstract { g } {
    \FrontMatterSetSection{#1}{Abstract}
}
\DeclareDocumentCommand \umiabstract { g } {
    \FrontMatterSetSection{#1}{Abstract}
}
\DeclareDocumentCommand \preface { g } {
    \FrontMatterSetSection{#1}{Preface}
}
%    \end{macrocode}
%
%
%   \UWSubModule{TOC Tweaks}
%
%   This section tweaks the Table of Contents, the List of Tables,
%   and the List of Figures commands to insert them into the
%   bookmark tree of the PDF.  Also, the commands for changing the
%   titles used for each of the commands' associated sections
%   are given.
%
%
%   First, store the original commands and then undefine them.
%    \begin{macrocode}
\cs_gset_eq:NN \TableOfContentsDefault \tableofcontents
\cs_gset_eq:NN \ListOfTablesDefault    \listoftables
\cs_gset_eq:NN \ListOfFiguresDefault   \listoffigures
\cs_undefine:N \tableofcontents
\cs_undefine:N \listoftables
\cs_undefine:N \listoffigures
%    \end{macrocode}
%
%   Now create token list variables to store the titles of the sections
%   and assign defaults.
%    \begin{macrocode}
\tl_new:N   \g__UWMad_TOC_Name_TOC_tl
\tl_new:N   \g__UWMad_TOC_Name_LOT_tl
\tl_new:N   \g__UWMad_TOC_Name_LOF_tl
\tl_gset:Nn \g__UWMad_TOC_Name_TOC_tl {Table~of~Contents}
\tl_gset:Nn \g__UWMad_TOC_Name_LOT_tl {List~of~Tables}
\tl_gset:Nn \g__UWMad_TOC_Name_LOF_tl {List~of~Figures}
%    \end{macrocode}
%
%   Define the new user-level commands.
%   Since these commands are technically Front Matter, they are
%   registered as such.
%    \begin{macrocode}
\DeclareDocumentCommand \tableofcontents { } {

    \tl_gset_eq:NN \contentsname \g__UWMad_TOC_Name_TOC_tl

    \group_begin:
        \setstretch{1.05}
        \phantomsection
        \ExplSyntaxOff
            \TableOfContentsDefault
        \ExplSyntaxOn
        \__UWMad_FrontMatter_Register:nn
            {chapter}
            {\contentsname}
        \clearpage
    \group_end:
}
\DeclareDocumentCommand \listoftables { } {

    \cs_set_eq:NN \listtablename \g__UWMad_TOC_Name_LOT_tl

    \group_begin:
        \setstretch{1.05}
        \ExplSyntaxOff
            \ListOfTablesDefault
        \ExplSyntaxOn
        \__UWMad_FrontMatter_Register:nn
            {chapter}
            {\listtablename}
        \clearpage
    \group_end:
}
\DeclareDocumentCommand \listoffigures { } {

    \cs_set_eq:NN \listfigurename \g__UWMad_TOC_Name_LOF_tl

    \group_begin:
        \setstretch{1.05}
        \ExplSyntaxOff
            \ListOfFiguresDefault
        \ExplSyntaxOn
        \__UWMad_FrontMatter_Register:nn
            {chapter}
            {\listfigurename}
        \clearpage
    \group_end:
}
%    \end{macrocode}
%
%   Camel-cased aliases.
%    \begin{macrocode}
\cs_set_eq:NN \TableOfContents \tableofcontents
\cs_set_eq:NN \ListOfTables    \listoftables
\cs_set_eq:NN \ListOfFigures   \listoffigures
%    \end{macrocode}
%
%   User-level commands to change the default names.
%    \begin{macrocode}
\DeclareDocumentCommand \TableOfContentsName { m } {
    \tl_gset:Nn \g__UWMad_TOC_Name_TOC_tl {#1}
}
\DeclareDocumentCommand \ListOfTablesName { m } {
    \tl_gset:Nn \g__UWMad_TOC_Name_LOT_tl {#1}
}
\DeclareDocumentCommand \ListOfFiguresName { m } {
    \tl_gset:Nn \g__UWMad_TOC_Name_LOF_tl {#1}
}
%    \end{macrocode}
%
%   \UWSubModule{Section-Level Commands}
%
%   These commands are used internally when needing to check if a
%   user-supplied \texttt{section} is a \LaTeXe{}-defined section and
%   also easily acquired/use the relationships among section levels
%   when needed.
%
%   These variables map a \texttt{section} to a level number and also serve
%   to define the existence of the level.
%    \begin{macrocode}
\tl_const:Nn \c__UWMad_SectionsLevel_part_tl            {-1}
\tl_const:Nn \c__UWMad_SectionsLevel_chapter_tl         {0}
\tl_const:Nn \c__UWMad_SectionsLevel_section_tl         {1}
\tl_const:Nn \c__UWMad_SectionsLevel_subsection_tl      {2}
\tl_const:Nn \c__UWMad_SectionsLevel_subsubsection_tl   {3}
\tl_const:Nn \c__UWMad_SectionsLevel_paragraph_tl       {4}
\tl_const:Nn \c__UWMad_SectionsLevel_subparagraph_tl    {5}
%    \end{macrocode}
%
%   Define a message to warn about an undefined section
%   and associated command to check if a section exists.
%    \begin{macrocode}
\msg_new:nnn { UWMadThesis } { Sectioning / UndefinedSection } {
    Undefined~section~'#1'~used.
}
\cs_new:Nn \UWMad_IfSectionExists:nT {
    \tl_if_exist:cTF {c__UWMad_SectionsLevel_ #1 _tl} {
        #2
    } {
        \msg_error:nnn
            { UWMadThesis }
            { Sectioning / UndefinedSection }
            {#1}
    }
}
%    \end{macrocode}
%
%   Variables that map a level number to a section.
%    \begin{macrocode}
\tl_const:cn {c__UWMad_LevelsSection_-1_tl} {part}
\tl_const:cn {c__UWMad_LevelsSection_ 0_tl} {chapter}
\tl_const:cn {c__UWMad_LevelsSection_ 1_tl} {section}
\tl_const:cn {c__UWMad_LevelsSection_ 2_tl} {subsection}
\tl_const:cn {c__UWMad_LevelsSection_ 3_tl} {subsubsection}
\tl_const:cn {c__UWMad_LevelsSection_ 4_tl} {paragraph}
\tl_const:cn {c__UWMad_LevelsSection_ 5_tl} {subparagraph}
%    \end{macrocode}
%
%   Variables that map a section to it's next lower one.
%    \begin{macrocode}
\tl_const:Nn \c__UWMad_NextSection_part_tl            {chapter}
\tl_const:Nn \c__UWMad_NextSection_chapter_tl         {section}
\tl_const:Nn \c__UWMad_NextSection_section_tl         {subsection}
\tl_const:Nn \c__UWMad_NextSection_subsection_tl      {subsubsection}
\tl_const:Nn \c__UWMad_NextSection_subsubsection_tl   {paragraph}
\tl_const:Nn \c__UWMad_NextSection_paragraph_tl       {subparagraph}
%    \end{macrocode}
%
%   Variables that map a section to it's next higher one.
%    \begin{macrocode}
\tl_const:Nn \c__UWMad_PreviousSection_chapter_tl         {part}
\tl_const:Nn \c__UWMad_PreviousSection_section_tl         {chapter}
\tl_const:Nn \c__UWMad_PreviousSection_subsection_tl      {section}
\tl_const:Nn \c__UWMad_PreviousSection_subsubsection_tl   {subsection}
\tl_const:Nn \c__UWMad_PreviousSection_paragraph_tl       {subsubsection}
\tl_const:Nn \c__UWMad_PreviousSection_subparagraph_tl    {paragraph}
%    \end{macrocode}
%
%   Given a section, acquire its level number.
%    \begin{macrocode}
\cs_new:Nn \UWMad_SectionToLevel:n {
    \UWMad_IfSectionExists:nT {#1} {
        \tl_use:c {c__UWMad_SectionsLevel_ #1 _tl}
    }
}
%    \end{macrocode}
%
%   Given a level number, acquire its section.
%    \begin{macrocode}
\cs_new:Nn \UWMad_LevelToSection:n {
    \UWMad_IfSectionExists:nT {#1} {
        \tl_use:c {c__UWMad_LevelsSection_ #1 _tl}
    }
}
%    \end{macrocode}
%
%   Given a section, acquire its next lower one.
%    \begin{macrocode}
\cs_new:Nn \UWMad_NextSection:n {
    \UWMad_IfSectionExists:nT {#1} {
        \tl_use:c {c__UWMad_NextSection_ #1 _tl}
    }
}
%    \end{macrocode}
%
%   Given a section, acquire its next higher one.
%    \begin{macrocode}
\cs_new:Nn \UWMad_PreviousSection:n {
    \UWMad_IfSectionExists:nT {#1} {
        \tl_use:c {c__UWMad_PreviousSection_ #1 _tl}
    }
}
%    \end{macrocode}
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWModule{Math}
%
%
%
%   We default the \cs{frac} command to a display style for all display
%   environments.
%    \begin{macrocode}
\tex_everydisplay:D \exp_after:wN {
    \tex_the:D \tex_everydisplay:D
    \cs_set_eq:NN \frac \dfrac
}
%    \end{macrocode}
%
%
%
%
%   \UWSubModule{Derivative Commands}
%   Define the token list variables for the three supported derivative types.
%    \begin{macrocode}
\tl_new:N   \g_UWMad_Math_derivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_derivSymbol_tl   {\mathrm{d}}
\tl_new:N   \g_UWMad_Math_pderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl  {\partial}
\tl_new:N   \g_UWMad_Math_tderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl  {\mathrm{D}}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultLeft_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultLeft_tl  {[}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultRight_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultRight_tl {]}
\tl_new:N   \l_UWMad_Math_DelimiterLeft_tl
\tl_new:N   \l_UWMad_Math_DelimiterRight_tl
%    \end{macrocode}
%
%
%   Define the user interface accessors.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbol { } {
    \g_UWMad_Math_derivSymbol_tl
}
\DeclareDocumentCommand \pderivSymbol { } {
    \g_UWMad_Math_pderivSymbol_tl
}
\DeclareDocumentCommand \tderivSymbol { } {
    \g_UWMad_Math_tderivSymbol_tl
}
%    \end{macrocode}
%
%
%   Define the user interface local mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%    \end{macrocode}
%
%
%   Define the user interface global mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%    \end{macrocode}
%
%
%   Define the \cs{left} and \cs{right} delimiter global mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \DelimiterChangeDefault { m m } {
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultLeft_tl  {#1}
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultRight_tl {#2}
}
%    \end{macrocode}
%
%
%   Define the generic regular and big derivative functions.
%    \begin{macrocode}
\DeclareDocumentCommand \DerivativeGeneral { +m +m m m } {
    \frac{ #4^{#3} #1      }
         { #4      #2^{#3} }
}
\DeclareDocumentCommand \DerivativeGeneralBig { +m +m m m m m} {

    \IfNoValueTF {#5} {
        \tl_set_eq:NN
            \l_UWMad_Math_DelimiterLeft_tl
            \g_UWMad_Math_DelimiterDefaultLeft_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterLeft_tl {#5}
    }

    \IfNoValueTF {#6} {
        \tl_set_eq:NN
            \l_UWMad_Math_DelimiterRight_tl
            \g_UWMad_Math_DelimiterDefaultRight_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterRight_tl {#6}
    }

    \frac{ #4^{#3}    }
         { #4 #2^{#3} }
    \!\!
    \left\l_UWMad_Math_DelimiterLeft_tl
        #1
    \right\l_UWMad_Math_DelimiterRight_tl
}
%    \end{macrocode}
%
%
%   Define the three supported derivative types' small forms.
%    \begin{macrocode}
\DeclareDocumentCommand \deriv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\derivSymbol}
}
\DeclareDocumentCommand \pderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\pderivSymbol}
}
\DeclareDocumentCommand \tderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\tderivSymbol}
}
%    \end{macrocode}
%
%
%   Define the three supported derivative types' big forms.
%    \begin{macrocode}
\DeclareDocumentCommand \derivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\derivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \pderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\pderivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \tderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\tderivSymbol}{#1}{#3}
}
%    \end{macrocode}
%
%   \UWSubModule{Operators and Functions}
%   Define all of the operators and function described in the user manual.
%    \begin{macrocode}
\DeclareMathOperator*{\Sup}    {Sup}
\DeclareMathOperator*{\Inf}    {Inf}
\DeclareMathOperator*{\Lim}    {Lim}
\DeclareMathOperator*{\Min}    {Min}
\DeclareMathOperator*{\Max}    {Max}
\DeclareMathOperator*{\ArgMin} {ArgMin}
\DeclareMathOperator*{\ArgMax} {ArgMax}
\DeclareMathOperator{\Abs}     {Abs}
\DeclareMathOperator{\Ln}      {Ln}
\DeclareMathOperator{\Log}     {Log}
\DeclareMathOperator{\Exp}     {Exp}
\DeclareMathOperator{\Cos}     {Cos}
\DeclareMathOperator{\Sin}     {Sin}
\DeclareMathOperator{\Tan}     {Tan}
\DeclareMathOperator{\Sec}     {Sec}
\DeclareMathOperator{\Csc}     {Csc}
\DeclareMathOperator{\Cot}     {Cot}
\DeclareMathOperator{\Cosh}    {Cosh}
\DeclareMathOperator{\Sinh}    {Sinh}
\DeclareMathOperator{\Tanh}    {Tanh}
\DeclareMathOperator{\Sech}    {Sech}
\DeclareMathOperator{\Csch}    {Csch}
\DeclareMathOperator{\Coth}    {Coth}
\DeclareMathOperator{\ArcCos}  {ArcCos}
\DeclareMathOperator{\ArcSin}  {ArcSin}
\DeclareMathOperator{\ArcTan}  {ArcTan}
\DeclareMathOperator{\ArcSec}  {ArcSec}
\DeclareMathOperator{\ArcCsc}  {ArcCsc}
\DeclareMathOperator{\ArcCot}  {ArcCot}
\DeclareMathOperator{\ArcCosh} {ArcCosh}
\DeclareMathOperator{\ArcSinh} {ArcSinh}
\DeclareMathOperator{\ArcTanh} {ArcTanh}
\DeclareMathOperator{\ArcSech} {ArcSech}
\DeclareMathOperator{\ArcCsch} {ArcCsch}
\DeclareMathOperator{\ArcCoth} {ArcCoth}
%    \end{macrocode}
%
%   \UWSubModule{Miscallaneous Functions}
%
%
%   Define the root function that has a tail.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Math_RootWithTail:nn {

    \hbox_set:Nn \l_tmpa_box {
        $
            \mathchoice
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
        $
    }
    %
    \dim_set:Nn \l_tmpa_dim {\box_ht:N \l_tmpa_box}
    \dim_set:Nn \l_tmpb_dim {0.8\l_tmpa_dim}
    %
    \hbox_set:Nn \l_tmpb_box {
        \tex_vrule:D height \l_tmpa_dim depth -\l_tmpb_dim
    }
    %
    \box_use:N \l_tmpa_box
    \box_move_down:nn {0.40pt}{\box_use:N \l_tmpb_box}
}
\DeclareDocumentCommand \Sqrt { O{} m } {
    \UWMad_Math_RootWithTail:nn{#1}{#2}
}
%    \end{macrocode}
%
%
%   User interface math mode check.
%    \begin{macrocode}
\DeclareExpandableDocumentCommand \IfMathModeTF { +m +m } {
    \mode_if_math:TF {
        #1
    }{
        $#2$
    }
}
%    \end{macrocode}
%
%
%   Undefine the \cs{sups} commands defined by the IPA package.
%    \begin{macrocode}
\cs_gset_eq:NN \supsipa \sups
\cs_undefine:N \sups
%    \end{macrocode}
%
%
%   Then define the \cs{subs}, \cs{sups}, and \cs{subsups} commands as
%   described in the manual.
%    \begin{macrocode}
\ExplSyntaxOff
    \DeclareDocumentCommand \subs { O{} +m } {%
        \IfMathModeTF{%
            _{\!\!\:#1\text{\scriptsize #2}}%
        }{%
            _{\!#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \sups { O{} +m } {%
        \IfMathModeTF{%
            ^{#1\text{\scriptsize #2}}%
        }{%
            ^{#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \subsups { O{} +m O{} +m } {%
        \IfMathModeTF{%
            _{#1\text{\scriptsize #2}}^{\!\!\:#3\text{\scriptsize #4}}%
        }{%
            _{#1\text{\scriptsize #2}}^{\!\!\!#3\text{\scriptsize #4}}%
        }%
    }%
\ExplSyntaxOn
\cs_gset_eq:NN \supsubs \subsups
%    \end{macrocode}
%
%
%   The one-over functions discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \OneOver { +m } {
    \frac{1}{#1}
}
\DeclareDocumentCommand \oneo { +m } {
    \OneOver{#1}
}
%    \end{macrocode}
%
%
%   The non-math `d' discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \dd { m } {
    \mathrm{d}{#1}
}
%    \end{macrocode}
%
%
%   The prime commands discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \dprime { } {
    {\prime\prime}
}
\DeclareDocumentCommand \tprime { } {
    {\prime\prime\prime}
}
%    \end{macrocode}
%
%
%   Two commands that were necessary for proper typesetting.
%    \begin{macrocode}
\DeclareDocumentCommand \LessThan        { } {<}
\DeclareDocumentCommand \GreaterThanThan { } {>}
%
%    \end{macrocode}
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%  \UWModule{ListOf}
%
%   The ListOf Module is a collection of commands that enables the easy
%   creation and typsetting of Lists.
%
%   Lists are taken to be any collection of entries that is to be typeset
%   with a particular style.  For example, a simple Nomenclature could be
%   considered a list of (symbol, description) entries to be typeset with a
%   fixed style for all entires.  The \texttt{ListOf} commands create a system
%   specifically for this scenario.
%
%   Of course, as the commands description will show, lists can be much more
%   complicated that two items.  For the \texttt{ListOf} system to function, an
%   author really only needs to define the \texttt{ListOf}, create a command to push
%   (enqueue) entries on to the \texttt{ListOf} queue, and at some point tell the
%   \texttt{ListOf} to typeset the entries it has stored (if display of the content
%   is desired).
%
%
%
%   \texttt{ListOf} variable declarations for section levels.
%    \begin{macrocode}
\tl_new:N   \l__UWMad_ListOf_Section_Main_tl
\tl_new:N   \l__UWMad_ListOf_Section_Group_tl
\tl_new:N   \l__UWMad_ListOf_Section_Subgroup_tl
%    \end{macrocode}
%
%   Boolean declarations for numbering and Table of Contents-inclusions.
%    \begin{macrocode}
\bool_new:N \l__UWMad_ListOf_MakeNumbered_Main_bool
\bool_new:N \l__UWMad_ListOf_MakeNumbered_Group_bool
\bool_new:N \l__UWMad_ListOf_MakeNumbered_Subgroup_bool
\bool_new:N \l__UWMad_ListOf_IncludeInTOC_Main_bool
\bool_new:N \l__UWMad_ListOf_IncludeInTOC_Group_bool
\bool_new:N \l__UWMad_ListOf_IncludeInTOC_Subgroup_bool
%    \end{macrocode}
%
%   Entry queue and and Hook hash initialization
%    \begin{macrocode}
\UWMad_Queue_Define:n {l__ListOf_EntryQueue}
\UWMad_Hash_Define:n  {l__ListOf_Hook}
\cs_new:Nn \__UWMad_Listof_SetHooks_Blank: {
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PreTitle-Main}       {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PostTitle-Main}      {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PreTitle-Group}      {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PostTitle-Group}     {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PreTitle-Subgroup}   {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PostTitle-Subgroup}  {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PrePush}             {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PostPush}            {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PrePrint}            {}
    \UWMad_Hash_Set:nnn   {l__ListOf_Hook}{PostPrint}           {}
}
%    \end{macrocode}
%
%   Function initializations for sectioning and title print commands.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ListOf_SectioningCommand_Main:     {}
\cs_new:Nn \__UWMad_ListOf_SectioningCommand_Group:    {}
\cs_new:Nn \__UWMad_ListOf_SectioningCommand_Subgroup: {}
\cs_new:Nn \UWMad_ListOf_PrintTitle_Main:nn     {}
\cs_new:Nn \UWMad_ListOf_PrintTitle_Group:nn    {}
\cs_new:Nn \UWMad_ListOf_PrintTitle_Subgroup:nn {}
%    \end{macrocode}
%
%
%   \begin{function}{\UWMad_ListOf_SetHook:nn}
%   \begin{syntax}
%       \cs{UWMad_ListOf_SetHook:nn}\Arg{Hook name}\Arg{Hook code}
%   \end{syntax}
%   Sets \Arg{Hook name} to \Arg{Hook code} for the \texttt{ListOf}.
%   There are hooks when pushing to the queue: \texttt{PrePush} and
%   \texttt{PostPush}.
%   There are hooks when printing entires: \texttt{PrePrint} and
%   \texttt{PostPrint}.
%   There are also hooks for all section titles: \texttt{PreTitle-*} and
%   \texttt{PostTitle-*}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_SetHook:nn {
    \UWMad_Hash_Set:nnn{l__ListOf_Hook}{#1}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%   These function initialize the sectioning commands for the associated
%   \texttt{ListOf} level.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ListOf_Initialize_SectioningCommand:n {
    \UWMad_IfSectionExists:nT {
        \tl_use:c {l__UWMad_ListOf_Section_ #1 _tl}
    } {
        \cs_set_eq:cc
            {__UWMad_ListOf_SectioningCommand_ #1 :}
            {\tl_use:c {l__UWMad_ListOf_Section_ #1 _tl}}
    }
}
\cs_new:Nn \__UWMad_ListOf_Initialize_SectioningCommands: {
    \__UWMad_ListOf_Initialize_SectioningCommand:n {Main}
    \__UWMad_ListOf_Initialize_SectioningCommand:n {Group}
    \__UWMad_ListOf_Initialize_SectioningCommand:n {Subgroup}
}
%    \end{macrocode}
%
%   This function initializes the list of using the helper functions above.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ListOf_Initialize_TitlePrinter:n {
    \cs_set:cn {UWMad_ListOf_PrintTitle_ #1 :nn} {
        \UWMad_Hash_Get:nn{l__ListOf_Hook}{PreTitle-#1}
        \bool_if:cTF {l__UWMad_ListOf_MakeNumbered_ #1 _bool} {
            \bool_if:cTF {l__UWMad_ListOf_IncludeInTOC_ #1 _bool} {
                \use:c{__UWMad_ListOf_SectioningCommand_ #1 :}[##1]{##2}
            } {
                \int_gset_eq:NN \l_tmpa_int \c@tocdepth
                \int_gset:Nn \c@tocdepth {-1}
                \use:c{__UWMad_ListOf_SectioningCommand_ #1 :}{##2}
                \int_gset:Nn \c@tocdepth {\l_tmpa_int}
            }
        } {
            \use:c{__UWMad_ListOf_SectioningCommand_ #1 :} * {##2}
            \bool_if:cTF {l__UWMad_ListOf_IncludeInTOC_ #1 _bool} {
                \addcontentsline
                    {toc}
                    {\tl_use:c{l__UWMad_ListOf_Section_ #1 _tl}}
                    {##1}
            } { }
        }
        \UWMad_Hash_Get:nn{l__ListOf_Hook}{PostTitle-#1}
    }
}
\cs_new:Nn \__UWMad_ListOf_Initialize_TitlePrinters: {
    \__UWMad_ListOf_Initialize_TitlePrinter:n {Main}
    \__UWMad_ListOf_Initialize_TitlePrinter:n {Group}
    \__UWMad_ListOf_Initialize_TitlePrinter:n {Subgroup}
}
%    \end{macrocode}
%
%   This function initializes the list of using the helper functions above.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_ListOf_Clear: {
    \UWMad_Queue_Clear:n   {l__ListOf_EntryQueue}
    \__UWMad_Listof_SetHooks_Blank:
}
\cs_new:Nn \UWMad_ListOf_Initialize: {
    \__UWMad_ListOf_Clear:
    \__UWMad_ListOf_Initialize_SectioningCommands:
    \__UWMad_ListOf_Initialize_TitlePrinters:
}
%    \end{macrocode}
%
%
%   \begin{function}{\UWMad_ListOf_PushEntry:nn}
%   \begin{syntax}
%       \cs{UWMad_ListOf_PushEntry:nn} \Arg{ID}\Arg{Entry}
%   \end{syntax}
%   Pushes \Arg{Entry} on to the entry queue of the \texttt{ListOf} with \Arg{ID}.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_PushEntry:n {
    \UWMad_Hash_Get:nn   {l__ListOf_Hook}{PrePush}
    \UWMad_Queue_Push:nn {l__ListOf_EntryQueue}{#1}
    \UWMad_Hash_Get:nn   {l__ListOf_Hook}{PostPush}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%   \begin{function}{\UWMad_ListOf_PrintEntries:n}
%   \begin{syntax}
%       \cs{UWMad_ListOf_PrintEntries:n}\Arg{ID}
%   \end{syntax}
%   Prints all entries currently in the \texttt{ListOf} queue with \marg{ID} and
%   clears the queue.  The \texttt{PrePrint} and \texttt{PostPrint} hooks
%   are also called here.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_ListOf_PrintEntries: {
    \UWMad_Hash_Get:nn   {l__ListOf_Hook}{PrePrint}
    \UWMad_Queue_Walk:nn {l__ListOf_EntryQueue}{##1}
    \UWMad_Queue_Clear:n {l__ListOf_EntryQueue}
    \UWMad_Hash_Get:nn   {l__ListOf_Hook}{PostPrint}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%
%   \UWSubModule{Nomenclature}
%
%   Dimensions that are calculated are declared first.
%    \begin{macrocode}
\dim_new:N \l__UWMad_Nomenclature_WidestSymbol_dim
\dim_new:N \l__UWMad_Nomenclature_WidestUnit_dim
\dim_new:N \l__UWMad_Nomenclature_Entry_Symbol_Width_dim
\dim_new:N \l__UWMad_Nomenclature_Entry_Units_Width_dim
\dim_new:N \l__UWMad_Nomenclature_Entry_Description_Width_dim
%    \end{macrocode}
%
%   Then user-adjustable dimensions are declared.
%    \begin{macrocode}
\dim_new:N \l_UWMad_Nomenclature_Skip_EntryPrint_dim
\dim_new:N \l_UWMad_Nomenclature_Entry_Margin_Left_dim
\dim_new:N \l_UWMad_Nomenclature_Entry_Margin_Bottom_dim
\dim_new:N \l_UWMad_Nomenclature_Entry_Margin_Right_dim
\dim_new:N \l_UWMad_Nomenclature_Entry_Margin_Top_dim
\dim_new:N \l_UWMad_Nomenclature_Entry_Pad_Column_dim
%    \end{macrocode}
%
%
%
%    \begin{macrocode}
\bool_new:N \l__UWMad_Nomenclature_IncludeUnitsColumns_bool
\tl_new:N   \l__UWMad_Nomenclature_Entry_LineStretch_tl
\tl_new:N   \l__UWMad_Nomenclature_Title_Main_tl
%    \end{macrocode}
%
%
%   \begin{function} {
%       \UWMad_Nomenclature_UpdateWidest:Nn,
%       \UWMad_Nomenclature_UpdateWidest_Symbol:n,
%       \UWMad_Nomenclature_UpdateWidest_Units:n,
%       }
%       \begin{syntax}
%           \cs{UWMad_Nomenclature_UpdateWidest:Nn}\meta{dim}\marg{object}
%           \cs{UWMad_Nomenclature_UpdateWidest_Symbol:n}\marg{symbol}
%           \cs{UWMad_Nomenclature_UpdateWidest_Units:n}\marg{units}
%       \end{syntax}
%       These commands update the widest symbol and widest unit lengths.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest:Nn {
    \hbox_set:Nn \l_tmpa_box {#2}
    \dim_set:Nn  \l_tmpa_dim {\box_wd:N \l_tmpa_box}
    \dim_compare:nNnTF {#1} < {\l_tmpa_dim} {
        \dim_set_eq:NN #1 \l_tmpa_dim
    } { }
}
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest_Symbol:n {
    \UWMad_Nomenclature_UpdateWidest:Nn
        \l__UWMad_Nomenclature_WidestSymbol_dim {#1}
}
%
\cs_new:Nn \UWMad_Nomenclature_UpdateWidest_Units:n {
    \UWMad_Nomenclature_UpdateWidest:Nn
        \l__UWMad_Nomenclature_WidestUnit_dim {#1}
}
%    \end{macrocode}
%   \end{function}
%
%   And the defaults for all keys are now set.
%   \begin{function} {
%       \UWMad_Nomenclature_ZeroWidest_Symbol:,
%       \UWMad_Nomenclature_ZeroWidest_Unit:
%       }
%       \begin{syntax}
%           \cs{UWMad_Nomenclature_ZeroWidest_Symbol:}
%           \cs{UWMad_Nomenclature_ZeroWidest_Symbol:}
%       \end{syntax}
%       These commands set the widest symbol and unit lengths to 0pt.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Nomenclature_ZeroWidest_Symbol: {
    \dim_set:Nn \l__UWMad_Nomenclature_WidestSymbol_dim {0pt}
}
\cs_new:Nn \UWMad_Nomenclature_ZeroWidest_Units: {
    \dim_set:Nn \l__UWMad_Nomenclature_WidestUnit_dim {0pt}
}
%    \end{macrocode}
%   \end{function}
%
%
%   And the defaults for all keys are now set.
%   \begin{function} {
%       \UWMad_Nomenclature_SetEntryWidths_NoUnits:,
%       \UWMad_Nomenclature_SetEntryWidths_Units:
%       }
%       \begin{syntax}
%           \cs{UWMad_Nomenclature_SetEntryWidths_NoUnits:}
%           \cs{UWMad_Nomenclature_SetEntryWidths_Units:}
%       \end{syntax}
%       These commands sets the widths of the description, symbol, and (if
%       present) unit boxes for a particular entry.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Nomenclature_SetEntryWidths_NoUnits: {
    \dim_set:Nn \l__UWMad_Nomenclature_Entry_Symbol_Width_dim {
        1.01\l__UWMad_Nomenclature_WidestSymbol_dim
    }
    \dim_set:Nn \l__UWMad_Nomenclature_Entry_Description_Width_dim {
        0.995\textwidth -
        \l_UWMad_Nomenclature_Entry_Margin_Left_dim   -
        \l__UWMad_Nomenclature_Entry_Symbol_Width_dim -
        \l_UWMad_Nomenclature_Entry_Pad_Column_dim      -
        \l_UWMad_Nomenclature_Entry_Margin_Right_dim
    }
}
\cs_new:Nn \UWMad_Nomenclature_SetEntryWidths_Units: {
    \dim_set:Nn \l__UWMad_Nomenclature_Entry_Symbol_Width_dim {
        1.01\l__UWMad_Nomenclature_WidestSymbol_dim
    }
    \dim_set:Nn \l__UWMad_Nomenclature_Entry_Units_Width_dim {
        1.01\l__UWMad_Nomenclature_WidestUnit_dim
    }
    \dim_set:Nn \l__UWMad_Nomenclature_Entry_Description_Width_dim {
        0.995\textwidth -
         \l_UWMad_Nomenclature_Entry_Margin_Left_dim   -
         \l__UWMad_Nomenclature_Entry_Symbol_Width_dim -
         \l__UWMad_Nomenclature_Entry_Units_Width_dim  -
        2\l_UWMad_Nomenclature_Entry_Pad_Column_dim       -
         \l_UWMad_Nomenclature_Entry_Margin_Right_dim
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   And the defaults for all keys are now set.
%   \begin{function} {
%       \UWMad_Nomenclature_SetEntryWidths:
%       }
%       \begin{syntax}
%           \cs{UWMad_Nomenclature_SetEntryWidths:}
%       \end{syntax}
%       This function calls one of the appropriate above setters.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Nomenclature_SetEntryWidths: {
    \bool_if:NTF \l__UWMad_Nomenclature_IncludeUnitsColumn_bool {
        \UWMad_Nomenclature_SetEntryWidths_Units:
    } {
        \UWMad_Nomenclature_SetEntryWidths_NoUnits:
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   And the defaults for all keys are now set.
%   \begin{function} {
%       \UWMad_Nomenclature_SetEntry_NoUnits:nn,
%       \UWMad_Nomenclature_SetEntry_Units:nnn
%       }
%       \begin{syntax}
%           \cs{UWMad_Nomenclature_SetEntry_NoUnits:}
%               \Arg{symbol}\Arg{description}
%           \cs{UWMad_Nomenclature_SetEntry_Units:}
%               \Arg{symbol}\Arg{units}\Arg{description}
%       \end{syntax}
%       These functions typeset the contents passed into them.
%    \begin{macrocode}
\coffin_new:N \l__UWMad_Nomenclature_Entry_coffin
\coffin_new:N \l__UWMad_Nomenclature_Symbol_coffin
\coffin_new:N \l__UWMad_Nomenclature_Description_coffin
\coffin_new:N \l__UWMad_Nomenclature_Units_coffin
\cs_new:Nn \UWMad_Nomenclature_SetEntry_NoUnits:nn {
    \coffin_clear:N \l__UWMad_Nomenclature_Entry_coffin
    \coffin_clear:N \l_tmpa_coffin
    \vcoffin_set:Nnn
        \l__UWMad_Nomenclature_Symbol_coffin
        {\l__UWMad_Nomenclature_Entry_Symbol_Width_dim} {#1}
    \vcoffin_set:Nnn
        \l__UWMad_Nomenclature_Description_coffin
        {\l__UWMad_Nomenclature_Entry_Description_Width_dim} {#2}
    \coffin_join:NnnNnnnn
        \l__UWMad_Nomenclature_Entry_coffin       {l}{t}
        \l__UWMad_Nomenclature_Symbol_coffin      {l}{t}
        {\l_UWMad_Nomenclature_Entry_Margin_Left_dim}{0pt}
    \coffin_join:NnnNnnnn
        \l__UWMad_Nomenclature_Entry_coffin        {r}{t}
        \l__UWMad_Nomenclature_Description_coffin  {l}{t}
        {\l_UWMad_Nomenclature_Entry_Pad_Column_dim}{0pt}
    \group_begin:
        \setstretch{\l__UWMad_Nomenclature_Entry_LineStretch_tl}
        \skip_vertical:n{\l_UWMad_Nomenclature_Entry_Margin_Top_dim}
        \coffin_typeset:Nnnnn
            \l__UWMad_Nomenclature_Entry_coffin {l}{t}{0pt}{0pt}
        \skip_vertical:n{\l_UWMad_Nomenclature_Entry_Margin_Bottom_dim}
    \group_end:
}
\cs_new:Nn \UWMad_Nomenclature_SetEntry_Units:nnn {
    \vcoffin_set:Nnn
        \l_tmpa_coffin
        {\l__UWMad_Nomenclature_Entry_Symbol_Width_dim}
        {#1}
    \vcoffin_set:Nnn
        \l_tmpb_coffin
        {\l__UWMad_Nomenclature_Entry_Units_Width_dim}
        {#2}
    \vcoffin_set:Nnn
        \l_tmpc_coffin
        {\l__UWMad_Nomenclature_Entry_Description_Width_dim}
        {#3}
    \group_begin:
        \setstretch{\l__UWMad_Nomenclature_Entry_LineStretch_tl}
        \skip_vertical:n   {\l_UWMad_Nomenclature_Entry_Margin_Top_dim}
        \skip_horizontal:n {\l_UWMad_Nomenclature_Entry_Margin_Left_dim}
        \coffin_typeset:Nnnnn \l_tmpa_coffin {l}{t}{0pt}{0pt}
        \skip_horizontal:n {\l_UWMad_Nomenclature_Entry_Pad_Column_dim}
        \coffin_typeset:Nnnnn \l_tmpb_coffin {l}{t}{0pt}{0pt}
        \skip_horizontal:n {\l_UWMad_Nomenclature_Entry_Pad_Column_dim}
        \coffin_typeset:Nnnnn \l_tmpc_coffin {l}{t}{0pt}{0pt}
        \skip_vertical:n {\l_UWMad_Nomenclature_Entry_Margin_Bottom_dim}
    \group_end:
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%    \begin{macrocode}
\DeclareDocumentEnvironment {Nomenclature} { o o } {
%
%   Initialization
    \UWMad_ListOf_Initialize:
    \setlength{\parskip}{0pt}
%
%
%   Check for an optional section declaration and
%   set Main section token list.
    \IfValueTF {#1} {
        \tl_set:Nx \l__UWMad_ListOf_Title_Main_tl { #1 }
    } { }
%
%
%
%   Set some hooks in the Nomenclature ListOf instance
    \UWMad_ListOf_SetHook:nn {PrePrint} {
        \UWMad_Nomenclature_SetEntryWidths:
    }
    \UWMad_ListOf_SetHook:nn {PostPrint} {
        \UWMad_Nomenclature_ZeroWidest_Symbol:
        \UWMad_Nomenclature_ZeroWidest_Units:
    }
%
%
%   User front-end for creating a Group
    \DeclareDocumentCommand \Group { o m } {
        \UWMad_ListOf_PrintEntries:
        \IfNoValueTF {##1} {
            \UWMad_ListOf_PrintTitle_Group:nn{##2}{##2}
        } {
            \UWMad_ListOf_PrintTitle_Group:nn{##1}{##2}
        }
    }
%
%   User front-end for creating a Subgroup
    \DeclareDocumentCommand \Subgroup { o m } {
        \UWMad_ListOf_PrintEntries:
        \IfNoValueTF {##1} {
            \UWMad_ListOf_PrintTitle_Subgroup:nn{##2}{##2}
        } {
            \UWMad_ListOf_PrintTitle_Subgroup:nn{##1}{##2}
        }
    }
%
%   User front-end for creating an entry
    \cs_undefine:N \Entry
    \bool_if:NTF \l__UWMad_Nomenclature_IncludeUnitsColumn_bool {
        \DeclareDocumentCommand \Entry { m m m } {
            \UWMad_ListOf_PushEntry:n {
                \UWMad_Nomenclature_SetEntry_Units:nnn
                    {##1} {##2} {##3}
            }
            \UWMad_Nomenclature_UpdateWidest_Symbol:n{##1}
            \UWMad_Nomenclature_UpdateWidest_Units:n{##2}
        }
    } {
        \DeclareDocumentCommand \Entry { m m } {
            \UWMad_ListOf_PushEntry:n {
                \UWMad_Nomenclature_SetEntry_NoUnits:nn
                    {##1} {##2}
            }
            \UWMad_Nomenclature_UpdateWidest_Symbol:n{##1}
        }
    }
%
%   User front-end for reseting the column width
    \DeclareDocumentCommand  \PrintEntries { } {
        \UWMad_ListOf_PrintEntries:
    }
%
%
    \IfNoValueTF {#2} {
        \IfNoValueTF {#1} {
            \UWMad_ListOf_PrintTitle_Main:nn
                {\l__UWMad_Nomenclature_Title_Main_tl}
                {\l__UWMad_Nomenclature_Title_Main_tl}
        } {
            \UWMad_ListOf_PrintTitle_Main:nn{#1}{#1}
        }
    } {
        \UWMad_ListOf_PrintTitle_Main:nn{#1}{#2}
    }
%
} {
%   Flush the remaining entries from the ListOf queue.
    \UWMad_ListOf_PrintEntries:
}
%
%
%
%
%
%
%
%
\clist_new:N   \g__UWMad_Nomenclature_KeyValuePairs_clist
\clist_gset:Nn \g__UWMad_Nomenclature_KeyValuePairs_clist {
    main-title .tl_set:N  = \l__UWMad_Nomenclature_Title_Main_tl,
    main-title .default:n = Nomenclature,
    main-section     .tl_set:N = \l__UWMad_ListOf_Section_Main_tl,
    group-section    .tl_set:N = \l__UWMad_ListOf_Section_Group_tl,
    subgroup-section .tl_set:N = \l__UWMad_ListOf_Section_Subgroup_tl,
    main-section     .default:n = chapter,
    group-section    .default:n = section,
    subgroup-section .default:n = subsection,
    make-main-numbered     .bool_set:N =
        \l__UWMad_ListOf_MakeNumbered_Main_bool,
    make-group-numbered    .bool_set:N =
        \l__UWMad_ListOf_MakeNumbered_Group_bool,
    make-subgroup-numbered .bool_set:N =
        \l__UWMad_ListOf_MakeNumbered_Subgroup_bool,
    make-numbered .meta:n = {
        make-main-numbered     = #1,
        make-group-numbered    = #1,
        make-subgroup-numbered = #1
    },
    make-numbered .default:n = false,
    include-main-in-toc     .bool_set:N =
        \l__UWMad_ListOf_IncludeInTOC_Main_bool,
    include-group-in-toc    .bool_set:N =
        \l__UWMad_ListOf_IncludeInTOC_Group_bool,
    include-subgroup-in-toc .bool_set:N =
        \l__UWMad_ListOf_IncludeInTOC_Subgroup_bool,
    include-in-toc .meta:n = {
        include-main-in-toc     = #1,
        include-group-in-toc    = #1,
        include-subgroup-in-toc = #1
    },
    include-in-toc .default:n = true,
    include-units-column .bool_set:N =
        \l__UWMad_Nomenclature_IncludeUnitsColumns_bool,
    include-units-column .default:n = false,
    print-skip           .dim_set:N =
        \l_UWMad_Nomenclature_Skip_EntryPrint_dim,
    entry-margin-top     .dim_set:N =
        \l_UWMad_Nomenclature_Entry_Margin_Top_dim,
    entry-margin-left    .dim_set:N =
        \l_UWMad_Nomenclature_Entry_Margin_Left_dim,
    entry-margin-right   .dim_set:N =
        \l_UWMad_Nomenclature_Entry_Margin_Right_dim,
    entry-margin-bottom  .dim_set:N =
        \l_UWMad_Nomenclature_Entry_Margin_Bottom_dim,
    entry-column-padding .dim_set:N =
        \l_UWMad_Nomenclature_Entry_Pad_Column_dim,
    print-skip           .default:n = 1em,
    entry-margin-top     .default:n = 0pt,
    entry-margin-left    .default:n = 1.1em,
    entry-margin-right   .default:n = 0pt,
    entry-margin-bottom  .default:n = 0.80em,
    entry-column-padding .default:n = 0.80em,
    entry-stretch .tl_set:N =
        \l__UWMad_Nomenclature_Entry_LineStretch_tl,
    entry-stretch .default:n = 1.1
}
%
%
\exp_args:Nnf
    \keys_define:nn
    { UWMadThesis / Nomenclature }
    {
        \clist_use:Nn \g__UWMad_Nomenclature_KeyValuePairs_clist {,}
    }
%
%
%
\keys_set:nn { UWMadThesis / Nomenclature } {
    main-title ,
    main-section     ,
    group-section    ,
    subgroup-section ,
    make-numbered ,
    include-in-toc ,
    include-units-column ,
    print-skip           ,
    entry-margin-top     ,
    entry-margin-left    ,
    entry-margin-right   ,
    entry-margin-bottom  ,
    entry-column-padding ,
    entry-stretch
}
%
%
%
%
%
%
%
%
%
\tl_new:N \l__UWMad_Acronym_Title_Main_tl
%
\DeclareDocumentEnvironment {Acronym} { o o } {

    \IfNoValueTF {#2} {
        \IfNoValueTF {#1} {
            \begin{Nomenclature}
                [\l__UWMad_Acronym_Title_Main_tl]
                [\l__UWMad_Acronym_Title_Main_tl]
        } {
            \begin{Nomenclature}[#1][#1]
        }
    } {
        \begin{Nomenclature}[#1][#2]
    }

%
%
    \UWMad_Hash_Define:n{Acronyms}
    \UWMad_Hash_Define:n{AcronymMeanings}
%
%
    \cs_undefine:N \Entry
    \DeclareDocumentCommand \Entry { o m m } {
        \IfNoValueTF {##1} {

            \UWMad_Hash_Set:nnn{Acronyms}       {##2}{##2}
            \UWMad_Hash_Set:nnn{AcronymMeanings}{##2}{##3}
            \bool_new:c {g__UWMad_Acronym_WasSet_##2_bool}
            %
            \UWMad_ListOf_PushEntry:n {
                \hypertarget{Acronym:##2}{}
                \UWMad_Nomenclature_SetEntry_NoUnits:nn
                    {##2} {##3}
            }

        } {

            \UWMad_Hash_Set:nnn{Acronyms}       {##1}{##2}
            \UWMad_Hash_Set:nnn{AcronymMeanings}{##1}{##3}
            \bool_new:c {g__UWMad_Acronym_WasSet_##1_bool}
            %
            \UWMad_ListOf_PushEntry:nn {Nomenclature} {
                \hypertarget{Acronym:##1}{}
                \UWMad_Nomenclature_SetEntry_NoUnits:nn
                    {##2} {##3}
            }

        }
        \UWMad_Nomenclature_UpdateWidest_Symbol:n{##2}
    }
} {

    \end{Nomenclature}

}
%
%
%
\cs_new:Nn \UWMad_Acronym_CreateLink:n {
    \hyperlink{Acronym:#1}{
        \color{\g__UWMad_Acronym_LinkColor_tl}
        \UWMad_Hash_Get:nn{Acronyms}{#1}
    }
}
%
%
\DeclareDocumentCommand \Acro { m } {
    \UWMad_Hash_IfKeySet:nnTF {Acronyms} {#1} {
        \bool_if:cTF {g__UWMad_Acronym_WasSet_#1_bool} {
            \bool_if:NTF \g__UWMad_Acronym_UseLinks_bool {
                \UWMad_Acronym_CreateLink:n{#1}
            } {
                \UWMad_Hash_Get:nn{Acronyms}{#1}
            }
        } {
            \UWMad_Hash_Get:nn{AcronymMeanings}{#1}~
                (
                    \UWMad_Hash_Get:nn{Acronyms}{#1}
                )
            \bool_gset_true:c {g__UWMad_Acronym_WasSet_#1_bool}
        }
    } { }
}
%
%
%    \end{macrocode}
%
%   Define the keys for the Acronym system by expanding the \texttt{clist}
%   created for the Nomenclature system.
%    \begin{macrocode}
\exp_args:Nnf
    \keys_define:nn
    { UWMadThesis / Acronym }
    {
        \clist_use:Nn \g__UWMad_Nomenclature_KeyValuePairs_clist {,}
    }
\keys_define:nn { UWMadThesis / Acronym } {
    main-title .tl_set:N  = \l__UWMad_Acronym_Title_Main_tl,
    main-title .default:n = Acronyms,
    use-links .bool_gset:N = \g__UWMad_Acronym_UseLinks_bool,
    use-links .default:n = true,
    link-color .tl_gset:N = \g__UWMad_Acronym_LinkColor_tl,
    link-color .default:n = blue
}
%    \end{macrocode}
%
%   And the defaults for all keys are now set.
%    \begin{macrocode}
\keys_set:nn { UWMadThesis / Acronym } {
    main-title           ,
    main-section         ,
    group-section        ,
    subgroup-section     ,
    make-numbered        ,
    include-in-toc       ,
    include-units-column ,
    print-skip           ,
    entry-margin-top     ,
    entry-margin-left    ,
    entry-margin-right   ,
    entry-margin-bottom  ,
    entry-column-padding ,
    entry-stretch        ,
    use-links            ,
    link-color
}
%    \end{macrocode}
%
%
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%^^A ------------------------------------------------------------------------ %
%^^A                    Metadata Writing/Importing Routines                   %
%^^A ------------------------------------------------------------------------ %
%
%   \UWModule{Thesis and PDF Information}
%
%
%   \UWSubModule{Metadata clist and Aux Write}
%   Since the metadata (i.e., properties) of a PDF must be set in the
%   preamble but typically a user defines them in the document, these
%   routines write the supported metadata that a user may define to an
%   auxiliary file that is then imported upon recompilation.  It uses
%   the |expl3| |clist| commands to define and build the CSV list, and
%   then writes to the file.
%
%
%   Define the |clist|.
%    \begin{macrocode}
\clist_new:N \g__UWMad_MetaDataList_clist
%    \end{macrocode}
%
%   Define a command for pushing entries (with a brace guard) on to the
%   |clist|.
%    \begin{macrocode}
\cs_new:Nn \UWMad_MetaData_PushToList:nn {
   \clist_gput_right:Nn \g__UWMad_MetaDataList_clist {
        #1={#2}
    }
}
%    \end{macrocode}
%
%   Define to booleans: one to tell if a auxilary file is needed
%   and to tell if the |document| has begun.
%    \begin{macrocode}
\bool_new:N \g__UWMad_MetaData_GenerateAux_bool
\bool_new:N \g__UWMad_MetaData_IsDocument_bool
%    \end{macrocode}
%
%   Look for a auxilary file and load it if it exists.
%    \begin{macrocode}
\file_if_exist:nTF{\c_job_name_tl.UWMad.PDFMetaData.aux} {
    \file_input:n {\c_job_name_tl.UWMad.PDFMetaData.aux}
}{}
%    \end{macrocode}
%
%   At the beginning of the document, if data has been pushed to the list,
%   pass it to \cs{hypersetup} so the PDF gets it.
%   Also, set the |IsDocument| boolean true.
%    \begin{macrocode}
\AtBeginDocument{
    \clist_if_empty:NTF \g__UWMad_MetaDataList_clist { } {
        \exp_args:Nx \hypersetup {
            \clist_use:Nn\g__UWMad_MetaDataList_clist{,}
        }
    } { }
    \bool_gset_true:N \g__UWMad_MetaData_IsDocument_bool
}
%    \end{macrocode}
%
%   If thesis information of PDF metadata was used within |document|,
%   write that information to an auxilary file.
%    \begin{macrocode}
\AtEndDocument{
    \bool_if:NTF \g__UWMad_MetaData_GenerateAux_bool {
        \clist_if_empty:NTF \g__UWMad_MetaDataList_clist { } {
            \iow_new:N   \g__UWMad_PDFMetaData_HyperSetup_io
            \iow_open:Nn \g__UWMad_PDFMetaData_HyperSetup_io {
                \c_job_name_tl.UWMad.PDFMetaData.aux
            }
            \iow_now:Nx  \g__UWMad_PDFMetaData_HyperSetup_io {
                \noexpand\ExplSyntaxOff
                    \noexpand\hypersetup
                    {\clist_use:Nn\g__UWMad_MetaDataList_clist{,}}
                \noexpand\ExplSyntaxOn
            }
            \iow_close:N \g__UWMad_PDFMetaData_HyperSetup_io
        } { }
    } { }
}
%    \end{macrocode}
%
%
%
%
%
%
%
%   \UWSubModule{Thesis Information}
%
%
%
%   Declare the |ThesisInfo| token list variables.
%    \begin{macrocode}
\tl_new:N \g__UWMad_ThesisInfo_Title_tl
\tl_new:N \g__UWMad_ThesisInfo_Author_tl
\tl_new:N \g__UWMad_ThesisInfo_DefenseDate_tl
\tl_new:N \g__UWMad_ThesisInfo_Department_tl
\tl_new:N \g__UWMad_ThesisInfo_Program_tl
\tl_new:N \g__UWMad_ThesisInfo_Degree_tl
\tl_new:N \g__UWMad_ThesisInfo_DocumentType_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorName_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorPosition_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorAssociation_tl
\tl_new:N \g__UWMad_ThesisInfo_AdvisorMarker_tl
\tl_new:N \g__UWMad_ThesisInfo_Institution_tl
%    \end{macrocode}
%
%   Set the document type default.
%    \begin{macrocode}
\tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {report}
%    \end{macrocode}
%
%   Define some booleans for required information.
%    \begin{macrocode}
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Title_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Author_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_DefenseDate_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Program_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Institution_bool
\bool_new:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
%    \end{macrocode}
%
%   Declare the user front-end for the title.
%    \begin{macrocode}
\DeclareDocumentCommand \Title { m } {
%    \end{macrocode}
%   Set the associated token list variable
%    \begin{macrocode}
    \tl_gset:Nn \g__UWMad_ThesisInfo_Title_tl {#1}
%    \end{macrocode}
%   Pass it to the default \LaTeX{} \cs{title} command.
%    \begin{macrocode}
    \title{#1}
%    \end{macrocode}
%   Push the value to the MetaData |clist|.
%    \begin{macrocode}
    \UWMad_MetaData_PushToList:nn{pdftitle}    {#1}
%    \end{macrocode}
%   If this command was used within the |document|, tell the class
%   to write an auxilary file.
%    \begin{macrocode}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
%    \end{macrocode}
%   Tell the class this variable is now set.
%    \begin{macrocode}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Title_bool
}
%    \end{macrocode}
%
%   Similar flow to the \cs{Title} defintion.
%    \begin{macrocode}
\DeclareDocumentCommand \Author { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Author_tl {#1}
    \author{#1}
    \UWMad_MetaData_PushToList:nn{pdfauthor}   {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Author_bool
}
%    \end{macrocode}
%
%   A simple setter command.
%    \begin{macrocode}
\DeclareDocumentCommand \Program { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Program_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Program_bool
}
%    \end{macrocode}
%
%   A simple setter command.
%    \begin{macrocode}
\DeclareDocumentCommand \Degree { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Degree_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
}
%    \end{macrocode}
%
%   Semantic names for the \cs{Degree} function.
%    \begin{macrocode}
\DeclareDocumentCommand \Doctorate { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Degree_tl {Doctor~of~Philosophy}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
}
\DeclareDocumentCommand \Masters { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Degree_tl {Master's}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
}
\DeclareDocumentCommand \Bachelors { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Degree_tl {Bachelor's}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Degree_bool
}
%    \end{macrocode}
%
%   A simple setter command.
%    \begin{macrocode}
\DeclareDocumentCommand \DocumentType { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {#1}
}
%    \end{macrocode}
%
%   Semantic names for the \cs{DocumentType} function.
%    \begin{macrocode}
\DeclareDocumentCommand \Dissertation { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {
        dissertation
    }
}
\DeclareDocumentCommand \DoctoralThesis { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {
        doctoral~thesis
    }
}
\DeclareDocumentCommand \MastersThesis { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {
        master's~thesis
    }
}
\DeclareDocumentCommand \Thesis { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {
        thesis
    }
}
\DeclareDocumentCommand \Prelim { } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DocumentType_tl {
        preliminary~report
    }
}
%    \end{macrocode}
%
%   A simple setter command and aliases.
%    \begin{macrocode}
\DeclareDocumentCommand \DefenseDate { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_DefenseDate_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_DefenseDate_bool
}
\cs_gset_eq:NN \DefenceDate \DefenseDate
%    \end{macrocode}
%
%   A simple setter command and alias.
%    \begin{macrocode}
\DeclareDocumentCommand \Institution { m } {
    \tl_gset:Nn       \g__UWMad_ThesisInfo_Institution_tl {#1}
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Institution_bool
}
\cs_set_eq:NN \University \Institution
%    \end{macrocode}
%
%   Define the optional user interface.
%    \begin{macrocode}
\DeclareDocumentCommand \Department { m } {
    \tl_gset:Nn \g__UWMad_ThesisInfo_Department_tl {#1}
}
%    \end{macrocode}
%
%   Define the Advisor and Adviser user interface.
%    \begin{macrocode}
\cs_new:Nn \UWMad_ThesisInfo_AdvisorInfo:nnn {
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorName_tl        {#1}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorPosition_tl    {#2}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorAssociation_tl {#3}
}
\DeclareDocumentCommand \Advisor { m m m } {
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
    \UWMad_ThesisInfo_AdvisorInfo:nnn{#1}{#2}{#3}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorMarker_tl {Advisor}
 }
\DeclareDocumentCommand \Adviser { m m m } {
    \bool_gset_true:N \g__UWMad_ThesisInfo_IsSet_Advisor_bool
    \UWMad_ThesisInfo_AdvisorInfo:nnn{#1}{#2}{#3}
    \tl_gset:Nn \g__UWMad_ThesisInfo_AdvisorMarker_tl {Adviser}
}
%    \end{macrocode}
%
%   Define an author interface for determingin if required information
%   has been set.
%    \begin{macrocode}
\msg_new:nnn { UWMadThesis } { ThesisInfo / UnsetInformation } {
    The~required~information~for~the~#1~is~not~set.
}
\DeclareDocumentCommand \IfInfoIsSetT { m +m } {
    \bool_if:cTF {g__UWMad_ThesisInfo_IsSet_ #1 _bool} {
        #2
    } {
        \msg_error:nnn
            { UWMadThesis }
            { ThesisInfo / UnsetInformation }
            {#1}
    }
}
%    \end{macrocode}
%
%   Define user accessors for thesis info.
%    \begin{macrocode}
\DeclareDocumentCommand \TheTitle { } {
    \g__UWMad_ThesisInfo_Title_tl
}
\DeclareDocumentCommand \TheAuthor { } {
    \g__UWMad_ThesisInfo_Author_tl
}
\DeclareDocumentCommand \TheProgram { } {
    \g__UWMad_ThesisInfo_Program_tl
}
\DeclareDocumentCommand \TheDegree { } {
    \g__UWMad_ThesisInfo_Degree_tl
}
\DeclareDocumentCommand \TheDocumentType { } {
    \g__UWMad_ThesisInfo_DocumentType_tl
}
\DeclareDocumentCommand \TheDefenseDate { } {
    \g__UWMad_ThesisInfo_DefenseDate_tl
}
\cs_gset_eq:NN \TheDefenceDate \TheDefenseDate
\DeclareDocumentCommand \TheInstitution { } {
    \g__UWMad_ThesisInfo_Institution_tl
}
\cs_set_eq:NN \TheUniversity \TheInstitution
%
\DeclareDocumentCommand \TheDepartment { } {
    \g__UWMad_ThesisInfo_Department_tl
}
\DeclareDocumentCommand \TheAdvisor { } {
    \g__UWMad_ThesisInfo_AdvisorName_tl
}
%    \end{macrocode}
%
%
%
%
%
%   \UWSubModule{Committee Member List}
%
%
%   Define internals for the Committee member list: a separator, a count, and
%   and |ListOf|.
%    \begin{macrocode}
\tl_new:N   \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl
\tl_gset:Nn \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl {,}
\int_new:N \g__UWMad_ThesisInfo_CommitteeCount_int
\UWMad_Queue_Define:n {CommitteeList}
%    \end{macrocode}
%
%   Define user interface for adding a person to the committee list.
%    \begin{macrocode}
\DeclareDocumentCommand \CommitteeMember { m m m } {
    \int_gincr:N \g__UWMad_ThesisInfo_CommitteeCount_int
    \UWMad_Queue_Push:nn {CommitteeList} {
        \tex_hbox:D{}
        \skip_horizontal:n{2em}
        #1
        \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl{}
        \
        \textsl{#2}
        \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl{}
        \
        \textsl{#3}
        \tex_par:D{}
    }
}
%    \end{macrocode}
%
%   Define an author interface for printing the Committee member list.
%    \begin{macrocode}
\DeclareDocumentCommand \PrintCommitteeMemberList { } {
    {
        \setstretch{0.25}
        \bool_if:NTF \g__UWMad_ThesisInfo_IsSet_Advisor_bool {
            \tex_hbox:D{}
            \skip_horizontal:n{2em}
            \g__UWMad_ThesisInfo_AdvisorName_tl{}
            \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl{}
            \
            \textsl{\g__UWMad_ThesisInfo_AdvisorPosition_tl{}}
            \g__UWMad_ThesisInfo_Committee_InfoSeparator_tl{}
            \
            \textsl{\g__UWMad_ThesisInfo_AdvisorAssociation_tl{}}
            \
            (\g__UWMad_ThesisInfo_AdvisorMarker_tl{})
            \tex_par:D
        } { }
        \UWMad_Queue_Walk:nn {CommitteeList}{##1}
    }
}
%    \end{macrocode}
%
%
%
%
%
%   \UWSubModule{PDF Metadata}
%
%
%
%   Define metadata internals.
%    \begin{macrocode}
\tl_new:N \g__UWMad_PDFMetaData_Subject_tl
\tl_new:N \g__UWMad_PDFMetaData_Keywords_tl
\tl_new:N \g__UWMad_PDFMetaData_Producer_tl
\tl_new:N \g__UWMad_PDFMetaData_Creator_tl
%    \end{macrocode}
%
%   Define user interface for setting metadata.
%    \begin{macrocode}
\DeclareDocumentCommand \Subject { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Subject_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfsubject}  {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Keywords { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Keywords_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfkeywords} {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Producer { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Producer_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfproducer}  {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
\DeclareDocumentCommand \Creator { m } {
    \tl_gset:Nn \g__UWMad_PDFMetaData_Creator_tl {#1}
    \UWMad_MetaData_PushToList:nn{pdfcreator} {#1}
    \bool_if:NTF \g__UWMad_MetaData_IsDocument_bool {
        \bool_gset_true:N \g__UWMad_MetaData_GenerateAux_bool
    } { }
}
%    \end{macrocode}
%
%   Define user interface for accessing metadata.
%    \begin{macrocode}
\DeclareDocumentCommand \TheSubject { } {
    \g__UWMad_PDFMetaData_Subject_tl
}
\DeclareDocumentCommand \TheKeywords { } {
    \g__UWMad_PDFMetaData_Keywords_tl
}
\DeclareDocumentCommand \TheProducer { } {
    \g__UWMad_PDFMetaData_Producer_tl
}
\DeclareDocumentCommand \TheCreator { } {
    \g__UWMad_PDFMetaData_Creator_tl
}
%
%    \end{macrocode}
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
%
%^^A ====================================================================== %
%^^A                            Title Page                                  %
%^^A ====================================================================== %
%
%   \UWModule{Special Pages}
%
%   \UWSubModule{MakeTitlePage}\label{Imp/Special Pages/MakeTitlePage}
%
%    \begin{macrocode}
% That phrase that occurs on every title page design the class author has seen
\DeclareDocumentCommand \FulfillmentClause { } {
    {
    \setstretch{1.1}
    A~\TheDocumentType{}~submitted~in~partial~fulfillment~of~the~
    requirements~for~the~degree~of
    }
}

\DeclareDocumentCommand \TitlePageTitle { } {
    \IfInfoIsSetT {Title} {
        {
            \LARGE
            \textsc {\TheTitle}
        }
    }
}

\DeclareDocumentCommand \TitlePageAuthor { } {
    \IfInfoIsSetT {Author} {
        {
            \large
            by  \\[0.50em]
            \TheAuthor{}
        }
    }
}

\DeclareDocumentCommand \TitlePageFulFillment { } {
    \FulfillmentClause{}
}

\DeclareDocumentCommand \TitlePageDegree { } {
    \IfInfoIsSetT {Degree} {
        (\TheDegree{})
    }
}

\DeclareDocumentCommand \TitlePageProgram { } {
    \IfInfoIsSetT {Program} {
        \TheProgram{}
    }
}

\DeclareDocumentCommand \TitlePageInstitution { } {
    \IfInfoIsSetT {Institution} {
        at~the                      \\[0.50em]
        \textsc{\TheInstitution{}}  \\[0.50em]
         \the\year
    }
}

\DeclareDocumentCommand \TitlePageDefenseDate { } {
    \IfInfoIsSetT {DefenseDate} {
        Date~of~final~oral~examination:~\TheDefenseDate{}
    }
}


\DeclareDocumentCommand \MakeTitlePage { } {
    \clearpage
    \thispagestyle{empty}
    \begin{center}
        \TitlePageTitle{}       \\[1.0em]
        \TitlePageAuthor{}      \\[1.0em]
        \vfill
        \TitlePageFulFillment{} \\[1.0em]
        \TitlePageDegree{}      \\[1.0em]
        \TitlePageProgram{}     \\[1.0em]
        \vfill
        \TitlePageInstitution{}
        \vfill
    \end{center}
    \TitlePageDefenseDate{}\\[1.0em]
    \PrintCommitteeMemberList{}
    \cleardoublepage
}





%    \end{macrocode}
%   \UWSubModule{LicensePage}
%   First, the support code for defining \cs{Copyright} and
%   \cs{CreativeCommons} will be given.
%   Then the user front-end will be given through the |LicensePage|
%   environment.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_LicensePage_StartPage: {
    \clearpage
    \thispagestyle{empty}
    \tex_hbox:D{}
    \tex_vfill:D
    \phantomsection
}
%
%    \end{macrocode}
%   \UWSubSubModule{Copyright}
%    \begin{macrocode}
\bool_new:N   \l__UWMad_Copyright_UseCopyright_bool
\cs_set_eq:NN \CopyrightSymbol \copyright

\cs_set:Nn \__UWMad_Copyright_LicenseText: {
    \begin{center}
        Copyright~\CopyrightSymbol{}~
        \l__UWMad_LicensePage_Year_tl{}~
        by~
        \l__UWMad_LicensePage_Owner_tl{}
    \end{center}
}
%
%
%
%
%    \end{macrocode}
%
%
%
%
%^^A ====================================================================== %
%^^A                       Creative Commons Licenses                        %
%^^A ====================================================================== %
%
%   \UWSubSubModule{Creative Commons}
%    \begin{macrocode}
%   Token lists
\tl_new:N    \l__UWMad_CCLicense_Porting_tl
\tl_new:N    \l__UWMad_CCLicense_Version_tl
\tl_new:N    \l__UWMad_CCLicense_TypeAbbreviation_tl
\tl_new:N    \l__UWMad_CCLicense_TypeWords_tl
\tl_new:N    \l__UWMad_CCLicense_URL_Front_tl
\tl_new:N    \l__UWMad_CCLicense_URL_Middle_tl
\tl_new:N    \l__UWMad_CCLicense_URL_Back_tl
\tl_new:N    \l__UWMad_CCLicense_URL_tl
\tl_new:N    \l__UWMad_CCLicense_http_tl
\tl_new:N    \l__UWMad_CCLicense_URLText_tl
%
%   Booleans
\bool_new:N \l__UWMad_CCLicense_UseCreativeCommons_bool
\bool_new:N \l__UWMad_CCLicense_UseAttribution_bool
\bool_new:N \l__UWMad_CCLicense_UseShareAlike_bool
\bool_new:N \l__UWMad_CCLicense_UseNoDerivatives_bool
\bool_new:N \l__UWMad_CCLicense_UseNonCommercial_bool
\bool_new:N \l__UWMad_CCLicense_IsValid_bool
\bool_set_true:N \l__UWMad_CCLicense_UseAttribution_bool
%
%   Valid license types
\cs_new:cn {l__UWMad_CCLicense_Valid_ by :}      {}
\cs_new:cn {l__UWMad_CCLicense_Valid_ by-sa :}   {}
\cs_new:cn {l__UWMad_CCLicense_Valid_ by-nd :}   {}
\cs_new:cn {l__UWMad_CCLicense_Valid_ by-nc :}   {}
\cs_new:cn {l__UWMad_CCLicense_Valid_ by-nc-sa :}{}
\cs_new:cn {l__UWMad_CCLicense_Valid_ by-nc-nd :}{}
%
%   Defaults
\tl_gset:Nn \l__UWMad_CCLicense_Porting_tl {
    International
}
\tl_gset:Nn \l__UWMad_CCLicense_Version_tl {
    4.0
}
%
%   URL definitions
\tl_set:Nn \l__UWMad_CCLicense_URL_Front_tl {
    creativecommons.org/licenses
}
\tl_set:Nn \l__UWMad_CCLicense_URL_Middle_tl {
    /\l__UWMad_CCLicense_TypeAbbreviation_tl
}
\tl_set:Nn \l__UWMad_CCLicense_URL_Back_tl {
    /\l__UWMad_CCLicense_Version_tl
}
\tl_set:Nn \l__UWMad_CCLicense_URL_tl {
    http://
    \l__UWMad_CCLicense_URL_Front_tl
    \l__UWMad_CCLicense_URL_Middle_tl
    \l__UWMad_CCLicense_URL_Back_tl
}
\tl_set:Nn \l__UWMad_CCLicense_http_tl {
    http://
}
%
%
\tl_set:Nn \l__UWMad_CCLicense_URLText_tl {
    Creative~Commons~
    \l__UWMad_CCLicense_TypeWords_tl{}~
    \l__UWMad_CCLicense_Version_tl{}~
    \l__UWMad_CCLicense_Porting_tl{}
}
%
%
%
%   Type Creator
\cs_new:Nn \__UWMad_CCLicense_CreateType: {

        \bool_if:NTF \l__UWMad_CCLicense_UseAttribution_bool {

            \tl_put_right:Nn \l__UWMad_CCLicense_TypeAbbreviation_tl {
                by
            }
            \tl_put_right:Nn \l__UWMad_CCLicense_TypeWords_tl {
                Attribution
            }

        } { }

        \bool_if:NTF \l__UWMad_CCLicense_UseNonCommercial_bool {

            \tl_put_right:Nn \l__UWMad_CCLicense_TypeAbbreviation_tl {
                -nc
            }
            \tl_put_right:Nn \l__UWMad_CCLicense_TypeWords_tl {
                -NonCommercial
            }

        } { }

        \bool_if:NTF \l__UWMad_CCLicense_UseShareAlike_bool {

            \tl_put_right:Nn \l__UWMad_CCLicense_TypeAbbreviation_tl {
                -sa
            }
            \tl_put_right:Nn \l__UWMad_CCLicense_TypeWords_tl {
                -ShareAlike
            }

        } { }

        \bool_if:NTF \l__UWMad_CCLicense_UseNoDerivatives_bool {

            \tl_put_right:Nn \l__UWMad_CCLicense_TypeAbbreviation_tl {
                -nd
            }
            \tl_put_right:Nn \l__UWMad_CCLicense_TypeWords_tl {
                -NoDerivatives
            }

        } { }
}
%
%
%
%   Type Validator
\cs_new:Nn \__UWMad_CCLicense_CheckTypeValidity: {
    \cs_if_exist:cTF {
        l__UWMad_CCLicense_Valid_
        \l__UWMad_CCLicense_TypeAbbreviation_tl :
    } {

        \bool_set_true:N \l__UWMad_CCLicense_IsValid_bool

    } {

        \msg_new:nnn {UWMadThesis} {CCLicense / InvalidLicenseType} {
            The~license~type~`\l__UWMad_CCLicense_TypeAbbreviation_tl'~
            is~not~a~valid~Creative~Commons~license.
        }
        \msg_error:nn {UWMadThesis} {CCLicense / InvalidLicenseType}

    }
}
%
%
%
%   Page Printer
\cs_new:Nn \__UWMad_CCLicense_LicenseText: {
    \begin{center}
        \setstretch{1.05}
        This~work~is~released~under~a~
        \href {\l__UWMad_CCLicense_URL_tl} {
            \l__UWMad_CCLicense_URLText_tl
        }~
        license.\\[0.1em]
        \l__UWMad_LicensePage_Owner_tl{},~
        \l__UWMad_LicensePage_Year_tl{}
    \end{center}
}
%
%    \end{macrocode}
%^^A ====================================================================== %
%^^A                            License Page                                %
%^^A ====================================================================== %
%
%   \UWSubSubModule{LicensePage Proper}
%
%
%    \begin{macrocode}
%
    \tl_new:N  \l__UWMad_LicensePage_Year_tl
    \tl_new:N  \l__UWMad_LicensePage_Owner_tl
%
    \tl_set:Nn \l__UWMad_LicensePage_Owner_tl {
        \g__UWMad_ThesisInfo_Author_tl
    }
    \tl_set:Nn \l__UWMad_LicensePage_Year_tl {
        \the\year
    }
%
%
%
\DeclareDocumentEnvironment {LicensePage} { } {
%
%
%
    \DeclareDocumentCommand \LicenseOwner { m } {
        \tl_set:Nn \l__UWMad_LicensePage_Owner_tl {
            ##1
        }
    }
    \DeclareDocumentCommand \TheLicenseOwner { } {
        \l__UWMad_LicensePage_Owner_tl
    }
%
    \DeclareDocumentCommand \LicenseYear { m } {
        \tl_set:Nn \l__UWMad_LicensePage_Year_tl {
            ##1
        }
    }
    \DeclareDocumentCommand \TheLicenseYear { } {
        \l__UWMad_LicensePage_Year_tl
    }
%
%
%
\DeclareDocumentCommand \Copyright { } {
    \bool_set_true:N \l__UWMad_Copyright_UseCopyright_bool
}
\cs_set_eq:NN \AllRightsReserved \Copyright
%
%
%
%   User front ends
\DeclareDocumentCommand \CreativeCommons { } {
    \bool_set_true:N \l__UWMad_CCLicense_UseCreativeCommons_bool
}
\DeclareDocumentCommand \Attribution { } {
    \bool_set_true:N \l__UWMad_CCLicense_UseAttribution_bool
}
\DeclareDocumentCommand \NonCommercial { } {
    \bool_set_true:N \l__UWMad_CCLicense_UseNonCommercial_bool
}
\DeclareDocumentCommand \ShareAlike { } {
    \bool_set_true:N \l__UWMad_CCLicense_UseShareAlike_bool
}
\DeclareDocumentCommand \NoDerivs { } {
    \bool_set_true:N \l__UWMad_CCLicense_UseNoDerivatives_bool
}
%
%
\DeclareDocumentCommand \CCVersion { m } {
    \tl_set:Nn \l__UWMad_CCLicense_Version_tl {##1}
}
%
\DeclareDocumentCommand \CCPorting { m } {
    \tl_set:Nn \l__UWMad_CCLicense_Porting_tl {##1}
}
%
\DeclareDocumentCommand \CCURL { m } {
    \tl_set:Nn \l__UWMad_CCLicense_URL_Front_tl  {##1}
    \tl_set:Nn \l__UWMad_CCLicense_URL_Middle_tl {/.}
    \tl_set:Nn \l__UWMad_CCLicense_URL_Back_tl   {}
}
%
\DeclareDocumentCommand \CCURLText { m } {
    \tl_set:Nn \l__UWMad_CCLicense_URLText_tl {##1}
}
%
%
} {

    \bool_if:nTF {
        \l__UWMad_CCLicense_UseCreativeCommons_bool &&
        \l__UWMad_Copyright_UseCopyright_bool
    } {
        \msg_new:nnn { UWMadThesis } { SpecialPages / MultipleLicenses } {
            Both~Creative~Commons~and~Copyright~have~been~declared.~
            Please,~pick~one.
        }
        \msg_error:nn { UWMadThesis } { SpecialPages / MultipleLicenses }
    } { }



    \bool_if:NTF \l__UWMad_CCLicense_UseCreativeCommons_bool {

        \__UWMad_CCLicense_CreateType:
        \__UWMad_CCLicense_CheckTypeValidity:
        \bool_if:NTF \l__UWMad_CCLicense_IsValid_bool {
            \cs_new_eq:NN
                \__UWMad_LicensePage_LicenseText:
                \__UWMad_CCLicense_LicenseText:
        } { }

    } { }



    \bool_if:NTF \l__UWMad_Copyright_UseCopyright_bool {
        \cs_new_eq:NN
            \__UWMad_LicensePage_LicenseText:
            \__UWMad_Copyright_LicenseText:
    } { }



    \cs_if_exist:NTF \__UWMad_LicensePage_LicenseText: {
        \__UWMad_LicensePage_StartPage:
        \vbox_to_ht:nn {0.3333\textheight} {
            \__UWMad_LicensePage_LicenseText:
        }
    } { }


}
%
%    \end{macrocode}
%
%   \iffalse
%</Code>
%   \fi
%   \iffalse
%<*Code>
%   \fi
%
% \UWModule{Relative Directory Input}
%
%
%   \UWSubModule{Declarations and Initializations}
%   Variable declarations and default initializations for Chapter directories.
%    \begin{macrocode}
\int_new:N  \g__UWMad_RelativeDirectory_Chapter_Count_int
\tl_new:N   \g__UWMad_RelativeDirectory_Chapter_Prefix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Chapter_Suffix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Chapter_CurrentPath_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Chapter_CurrentName_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Chapter_ParentPath_tl
\tl_gset:Nn \g__UWMad_RelativeDirectory_Chapter_ParentPath_tl {}
%    \end{macrocode}
%
%   Variable declarations and default initializations for Section directories.
%    \begin{macrocode}
\int_new:N  \g__UWMad_RelativeDirectory_Section_Count_int
\tl_new:N   \g__UWMad_RelativeDirectory_Section_Prefix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Section_Suffix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Section_CurrentPath_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Section_CurrentName_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Section_ParentPath_tl
\tl_gset:Nn \g__UWMad_RelativeDirectory_Section_ParentPath_tl {
    \g__UWMad_RelativeDirectory_Chapter_CurrentPath_tl/
}
%    \end{macrocode}
%
%   Variable declarations and default initializations for Subsection
%   directories.
%    \begin{macrocode}
\int_new:N  \g__UWMad_RelativeDirectory_Subsection_Count_int
\tl_new:N   \g__UWMad_RelativeDirectory_Subsection_Prefix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Subsection_Suffix_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Subsection_CurrentPath_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Subsection_CurrentName_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Subsection_ParentPath_tl
\tl_gset:Nn \g__UWMad_RelativeDirectory_Subsection_ParentPath_tl {
    \g__UWMad_RelativeDirectory_Section_CurrentPath_tl/
}
%    \end{macrocode}
%
%   Variable declaration for graphics inclusion
%    \begin{macrocode}
\tl_new:N   \g__UWMad_RelativeDirectory_Graphics_DirectoryName_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Graphics_Extension_tl
\tl_new:N   \g__UWMad_RelativeDirectory_Graphics_BaseName_tl
%    \end{macrocode}
%
%   Variable declarations for search options.
%    \begin{macrocode}
\bool_new:N \g__UWMad_RelativeDirectory_CycleThrough_Graphics_bool
\bool_new:N \g__UWMad_RelativeDirectory_CycleThrough_Files_bool
%    \end{macrocode}
%
%   Miscellaneous variable initializations for the system
%    \begin{macrocode}
\tl_new:N    \g__UWMad_RelativeDirectory_File_CurrentName_tl
\tl_new:N    \g__UWMad_RelativeDirectory_OptionalPath_tl
\seq_new:N   \g__UWMad_RelativeDirectory_PathStack_Files_seq
\seq_new:N   \g__UWMad_RelativeDirectory_PathStack_Graphics_seq
\bool_new:N  \g__UWMad_RelativeDirectory_IsFileFound_bool
%    \end{macrocode}
%
%
%
%   Miscellaneous control sequence initializations for the system.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_Chapter_SetName:    {}
\cs_new:Nn \UWMad_RelativeDirectory_Section_SetName:    {}
\cs_new:Nn \UWMad_RelativeDirectory_Subsection_SetName: {}
%    \end{macrocode}
%
%
%   \UWSubModule{Back End Code}
%   All of the underlying \LaTeXPL{} code for this module is in this section.
%
%
%   \UWSubSubModule{File Inclusion}
%
%   Special hooks for the automatic naming function below.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_Increment_Hook_Chapter: {
    \int_gset:cn {g__UWMad_RelativeDirectory_Section_Count_int}{0}
    \int_gset:cn {g__UWMad_RelativeDirectory_Subsection_Count_int}{0}
}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_Increment_Hook_Section: {
    \int_gset:cn {g__UWMad_RelativeDirectory_Subsection_Count_int}{0}
}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_Increment_Hook_Subsection: {}
%    \end{macrocode}
%
%   Directory name-setting functions.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_None:n {
    \tl_gset:cx   {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl} {
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Prefix_tl}
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Suffix_tl}
    }
}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_Increment:n {
    \use:c{UWMad_RelativeDirectory_SetName_Increment_Hook_ #1 :}
    \int_gincr:c  {g__UWMad_RelativeDirectory_ #1 _Count_int}
    \tl_gset:cx   {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl} {
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Prefix_tl}
        \int_to_arabic:n{
            \int_use:c{g__UWMad_RelativeDirectory_ #1 _Count_int}
        }
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Suffix_tl}
    }
}
\cs_new:Nn \UWMad_RelativeDirectory_SetName_Same:n {
    \tl_gset:cx   {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl} {
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Prefix_tl}
        \g__UWMad_RelativeDirectory_File_CurrentName_tl
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _Suffix_tl}
    }
}
%    \end{macrocode}
%
%
%   Name and path setter.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_SetNameAndPath:n {

    \tl_gclear:c {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
    \tl_gclear:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}

    \tl_if_blank:VTF {\g__UWMad_RelativeDirectory_OptionalPath_tl} {
        \use:c {UWMad_RelativeDirectory_ #1 _SetName:}
    } {
        \tl_gset_eq:cN
            {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
            \g__UWMad_RelativeDirectory_OptionalPath_tl
    }
    \tl_gset:cx   {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl} {
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _ParentPath_tl}
        \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
    }
}
%    \end{macrocode}
%
%
%   The default push function pushes to both the file and graphics stacks.
%   However, if the user defines a single (the only) graphics folder, a
%   files-only push function is also defined that will be used when that
%   option is set.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_RelativeDirectory_StackPush_Default:n {
    \tl_gset_eq:Nc
        \g_tmpa_tl
        {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
    \tl_if_blank:VTF {\g_tmpa_tl} { } {
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Files_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}
        }
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Graphics_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}
        }
    }
}
\cs_new:Nn \__UWMad_RelativeDirectory_StackPush_Files:n {
    \tl_gset_eq:Nc
        \g_tmpa_tl
        {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
    \tl_if_blank:VTF {\g_tmpa_tl} { } {
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Files_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}
        }
    }
}
%    \end{macrocode}
%
%
%   The default push function uses the default function above.
%   If the user sets a graphics directory name (in which there may be multiple
%   graphics directories in all subdirectories), this will be re-defined.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_RelativeDirectory_StackPush:n {
    \__UWMad_RelativeDirectory_StackPush_Default:n{#1}
}
%    \end{macrocode}
%
%
%   Pre-stack update functions for the supported sections.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_UpdateStack_Chapter_PreHook: {
    \seq_gclear:N \g__UWMad_RelativeDirectory_PathStack_Files_seq
    \seq_gclear:N \g__UWMad_RelativeDirectory_PathStack_Graphics_seq
}
\cs_new:Nn \UWMad_RelativeDirectory_UpdateStack_Section_PreHook: {}
\cs_new:Nn \UWMad_RelativeDirectory_UpdateStack_Subsection_PreHook: {}
%    \end{macrocode}
%   This function updates the current name, path, and stack(s).
%   Chapters inclusions always clear the stacks.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_UpdateStack:n {
    \use:c {UWMad_RelativeDirectory_UpdateStack_ #1 _PreHook:}
    \UWMad_RelativeDirectory_SetNameAndPath:n{#1}
    \__UWMad_RelativeDirectory_StackPush:n{#1}
}
%    \end{macrocode}
%
%
%   Two file inputers: one cycles through the current path stack searching
%   for the file from deepest to highest and the other only searches the
%   deepest (i.e., current) directory.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeFile_CycleThrough: {
    \seq_map_inline:Nn \g__UWMad_RelativeDirectory_PathStack_Files_seq {
        \tl_gset:Nx \g_tmpa_tl {
            ./##1/
            \g__UWMad_RelativeDirectory_File_CurrentName_tl
        }
        \bool_if:NTF \g__UWMad_RelativeDirectory_IsFileFound_bool { } {
            \file_if_exist:nTF { \g_tmpa_tl } {
                \file_input:n{ \g_tmpa_tl }
                \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
                \seq_map_break:
            } { }
        }
    }
}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeFile_CheckDeepest: {

    \seq_get:NN
        \g__UWMad_RelativeDirectory_PathStack_Files_seq
        \g_tmpa_tl
    \tl_gset:Nx \g_tmpa_tl {
            ./\g_tmpa_tl/
            \g__UWMad_RelativeDirectory_File_CurrentName_tl
    }
    \file_if_exist:nTF {\g_tmpa_tl} {
        \file_input:n{\g_tmpa_tl}
        \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
    } { }
}
%    \end{macrocode}
%
%   This is a wrapper function for the above two functions with two additional
%   behaviors: if the file is not found from the search stack, it will check
%   the topmost \TeX{} directory for the file and issue a warning if it is not
%   found.
%    \begin{macrocode}
\msg_new:nnn { UWMadThesis }{ RelativeDirectory / FileNotFound } {
    The~requested~file~'#1'~was~not~found~in~the~current~search~stack~nor~the~
    main~LaTeX~directory~for~the~job~'\c_job_name_tl'.
}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeFile: {
    \bool_gset_false:N \g__UWMad_RelativeDirectory_IsFileFound_bool

    \bool_if:NTF \g__UWMad_RelativeDirectory_CycleThrough_Files_bool {
        \UWMad_RelativeDirectory_IncludeFile_CycleThrough:
    } {
        \UWMad_RelativeDirectory_IncludeFile_CheckDeepest:
    }
    \bool_if:NTF \g__UWMad_RelativeDirectory_IsFileFound_bool { } {
        \file_if_exist:nTF {\g__UWMad_RelativeDirectory_File_CurrentName_tl} {
            \file_input:n{ \g__UWMad_RelativeDirectory_File_CurrentName_tl }
            \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
        } {
            \msg_warning:nnx
                { UWMadThesis }
                { RelativeDirectory / FileNotFound }
                { \g__UWMad_RelativeDirectory_File_CurrentName_tl }
        }
    }
}
%    \end{macrocode}
%
%
%
%
%
%
%
%
%
%
%
%
%   \UWSubSubModule{Graphics Inclusion}
%
%   This code copies the existing \cs{includegraphics} command such that it
%   can be used in a compatible way with the \LaTeXe{} system.
%   This technically breaks the \LaTeXPL{} naming convention since an |n|
%   argument specifier is not a for double square braces, but it is deemed
%   good enough.
%    \begin{macrocode}
\cs_new_eq:NN
    \__UWMad_RelativeDirectory_IncludeGraphics_Original:nn
    \includegraphics
\cs_undefine:N
    \includegraphics
%    \end{macrocode}
%
%   This function defines the push procedure when a graphics directory name is
%   given.
%   This function will replace the default stack push if the user defines
%   a graphics directory.
%    \begin{macrocode}
\cs_new:Nn \__UWMad_RelativeDirectory_StackPush_FilesAndGraphics:n {
    \tl_gset_eq:Nc
        \g_tmpa_tl
        {g__UWMad_RelativeDirectory_ #1 _CurrentName_tl}
    \tl_if_blank:VTF {\g_tmpa_tl} { } {
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Files_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}
        }
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Graphics_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}
        }
        \seq_gpush:Nx \g__UWMad_RelativeDirectory_PathStack_Graphics_seq {
            \tl_use:c {g__UWMad_RelativeDirectory_ #1 _CurrentPath_tl}/
            \g__UWMad_RelativeDirectory_Graphics_DirectoryName_tl
        }
    }
}
%    \end{macrocode}
%
%
%   Two graphics includers: one cycles through the current path stack searching
%   for the file from deepest to highest and the other only searches the
%   deepest (i.e., current graphic's) directory.
%    \begin{macrocode}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeGraphics_CycleThrough:n {

    \UWMad_File_GetExtension:nNN
        {\g__UWMad_RelativeDirectory_File_CurrentName_tl}
        \g__UWMad_RelativeDirectory_Graphics_BaseName_tl
        \g__UWMad_RelativeDirectory_Graphics_Extension_tl

    \seq_map_inline:Nn \g__UWMad_RelativeDirectory_PathStack_Graphics_seq {

        \tl_gset:Nx \g_tmpa_tl {
            ./##1/
            \g__UWMad_RelativeDirectory_File_CurrentName_tl
        }

        \bool_if:NTF \g__UWMad_RelativeDirectory_IsFileFound_bool { } {
            \file_if_exist:nTF { \g_tmpa_tl } {
                \tl_gset:Nx \g_tmpa_tl {
                    ./##1/
                    \g__UWMad_RelativeDirectory_Graphics_BaseName_tl
                }
                \__UWMad_RelativeDirectory_IncludeGraphics_Original:nn
                    [ #1 ] {\g_tmpa_tl}
                \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
                \seq_map_break:
            } { }
        }
    }
}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeGraphics_CheckDeepest:n {

    \seq_get:NN
        \g__UWMad_RelativeDirectory_PathStack_Graphics_seq
        \g_tmpa_tl

    \tl_gset:Nx \g_tmpb_tl {
            ./\g_tmpa_tl/
            \g__UWMad_RelativeDirectory_File_CurrentName_tl
    }

    \UWMad_File_GetExtension:nNN {\g_tmpb_tl}
        \g__UWMad_RelativeDirectory_Graphics_BaseName_tl
        \g__UWMad_RelativeDirectory_Graphics_Extension_tl

    \file_if_exist:nTF { \g_tmpb_tl } {
        \__UWMad_RelativeDirectory_IncludeGraphics_Original:nn
            [ #1 ]
            { \g__UWMad_RelativeDirectory_Graphics_BaseName_tl }
        \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
    } { }
}
%    \end{macrocode}
%
%   This is a wrapper function for the above two functions with two additional
%   behaviors: if the graphic is not found from the search stack, it will check
%   the topmost \TeX{} directory  and issue a warning if it is still not
%   found.
%    \begin{macrocode}
\msg_new:nnn { UWMadThesis }{ RelativeDirectory / GraphicNotFound } {
    The~requested~graphic~'#1'~was~not~found~in~the~current~search~stack~nor~
    the~main~LaTeX~directory~for~the~job~'\c_job_name_tl'.
}
\cs_new:Nn \UWMad_RelativeDirectory_IncludeGraphics:n {
    \bool_gset_false:N \g__UWMad_RelativeDirectory_IsFileFound_bool
    \bool_if:NTF \g__UWMad_RelativeDirectory_CycleThrough_Graphics_bool {
        \UWMad_RelativeDirectory_IncludeGraphics_CycleThrough:n{#1}
    } {
        \UWMad_RelativeDirectory_IncludeGraphics_CheckDeepest:n{#1}
    }
    \bool_if:NTF \g__UWMad_RelativeDirectory_IsFileFound_bool { } {
        \file_if_exist:nTF {\g__UWMad_RelativeDirectory_File_CurrentName_tl} {
            \__UWMad_RelativeDirectory_IncludeGraphics_Original:nn
            [ #1 ]
            { \g__UWMad_RelativeDirectory_File_CurrentName_tl }
            \bool_gset_true:N \g__UWMad_RelativeDirectory_IsFileFound_bool
        } {
            \msg_warning:nnx
                { UWMadThesis }
                { RelativeDirectory / GraphicNotFound }
                { \g__UWMad_RelativeDirectory_File_CurrentName_tl }
        }
    }
}
%    \end{macrocode}
%
%
%
%
%
%
%
%
%   \UWSubSubModule{Key-Value Option Definitions}
%
%
%
%   Being the key definitions
%    \begin{macrocode}
\keys_define:nn { UWMadThesis / RelativeDirectory } {
%    \end{macrocode}
%
%
%
%   Chapter prefix and suffix keys.
%    \begin{macrocode}
    chapter-directory-prefix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Chapter_Prefix_tl,
    chapter-directory-prefix    .default:n =,
    chapter-directory-suffix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Chapter_Suffix_tl,
    chapter-directory-suffix    .default:n =,
%    \end{macrocode}
%
%
%
%   Chapter naming conventions
%    \begin{macrocode}
    chapter-directory-name      .choice:,
    chapter-directory-name / none .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Chapter_SetName: {
            \UWMad_RelativeDirectory_SetName_None:n{Chapter}
        }
    },
    chapter-directory-name / same .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Chapter_SetName: {
            \UWMad_RelativeDirectory_SetName_Same:n{Chapter}
        }
    },
    chapter-directory-name / increment .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Chapter_SetName: {
            \UWMad_RelativeDirectory_SetName_Increment:n{Chapter}
        }
    },
    chapter-directory-name      .default:n = none,
%    \end{macrocode}
%
%
%
%   Section prefix and suffix keys.
%    \begin{macrocode}
    section-directory-prefix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Section_Prefix_tl,
    section-directory-prefix    .default:n =,
    section-directory-suffix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Section_Suffix_tl,
    section-directory-suffix    .default:n =,
%    \end{macrocode}
%
%
%
%   Section naming conventions
%    \begin{macrocode}
    section-directory-name      .choice:,
    section-directory-name / none .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Section_SetName: {
            \UWMad_RelativeDirectory_SetName_None:n{Section}
        }
    },
    section-directory-name / same .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Section_SetName: {
            \UWMad_RelativeDirectory_SetName_Same:n{Section}
        }
    },
    section-directory-name / increment .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Section_SetName: {
            \UWMad_RelativeDirectory_SetName_Increment:n{Section}
        }
    },
    section-directory-name      .default:n = none,
%    \end{macrocode}
%
%
%
%   Subsection prefix and suffix keys.
%    \begin{macrocode}
    subsection-directory-prefix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Subsection_Prefix_tl,
    subsection-directory-prefix    .default:n =,
    subsection-directory-suffix    .tl_gset:N =
        \g__UWMad_RelativeDirectory_Subsection_Suffix_tl,
    subsection-directory-suffix    .default:n =,
%    \end{macrocode}
%
%
%
%   Subsection naming conventions
%    \begin{macrocode}
    subsection-directory-name      .choice:,
    subsection-directory-name / none .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Subsection_SetName: {
            \UWMad_RelativeDirectory_SetName_None:n{Subsection}
        }
    },
    subsection-directory-name / same .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Subsection_SetName: {
            \UWMad_RelativeDirectory_SetName_Same:n{Subsection}
        }
    },
    subsection-directory-name / increment .code:n = {
        \cs_gset:Nn \UWMad_RelativeDirectory_Subsection_SetName: {
            \UWMad_RelativeDirectory_SetName_Increment:n{Subsection}
        }
    },
    subsection-directory-name      .default:n = none,
%    \end{macrocode}
%
%
%   Graphics directory keys.
%    \begin{macrocode}
    graphics-directory-name .code:n = {
        \tl_gset:Nn \g__UWMad_RelativeDirectory_Graphics_DirectoryName_tl {
            #1
        }
        \tl_if_blank:nTF { #1 } {
            \cs_gset:Nn \__UWMad_RelativeDirectory_StackPush:n {
                \__UWMad_RelativeDirectory_StackPush_Default:n{##1}
            }
        } {
            \cs_gset:Nn \__UWMad_RelativeDirectory_StackPush:n {
                \__UWMad_RelativeDirectory_StackPush_FilesAndGraphics:n{##1}
            }
        }
    },
    the-only-graphics-directory .code:n = {
        \bool_set_false:N
            \g__UWMad_RelativeDirectory_CycleThrough_Graphics_bool
        \seq_gclear:N \g__UWMad_RelativeDirectory_PathStack_Graphics_seq
        \seq_gpush:Nn \g__UWMad_RelativeDirectory_PathStack_Graphics_seq {
            #1
        }
        \cs_gset:Nn \UWMad_RelativeDirectory_UpdateStack_Chapter_PreHook: {
            \seq_gclear:N \g__UWMad_RelativeDirectory_PathStack_Files_seq
        }
        \cs_gset:Nn \__UWMad_RelativeDirectory_StackPush:n {
            \__UWMad_RelativeDirectory_StackPush_Files:n{##1}
        }
    },
%    \end{macrocode}
%
%   Path search keys.
%    \begin{macrocode}
    cycle-file-paths .bool_gset:N =
        \g__UWMad_RelativeDirectory_CycleThrough_Files_bool,
    cycle-file-paths .default:n = false,
    cycle-graphic-paths .bool_gset:N =
        \g__UWMad_RelativeDirectory_CycleThrough_Graphics_bool,
    cycle-graphic-paths .default:n = true
}
%    \end{macrocode}
%
%   Set the default values for the keys.
%    \begin{macrocode}
\keys_set:nn { UWMadThesis / RelativeDirectory } {
    chapter-directory-prefix,
    chapter-directory-suffix,
    section-directory-prefix,
    section-directory-suffix,
    subsection-directory-prefix,
    subsection-directory-suffix,
    chapter-directory-name,
    section-directory-name,
    subsection-directory-name,
    cycle-file-paths,
    cycle-graphic-paths
}
%    \end{macrocode}
%
%   \UWSubModule{User Front Ends}
%    \begin{macrocode}
\DeclareDocumentCommand \IncludeChapter { o m } {
    \IfValueTF { #1 } {
        \tl_gset:Nn \g__UWMad_RelativeDirectory_OptionalPath_tl {#1}
    } { }
    \tl_gset:Nn \g__UWMad_RelativeDirectory_File_CurrentName_tl {#2}
    \UWMad_RelativeDirectory_UpdateStack:n{Chapter}
    \UWMad_RelativeDirectory_IncludeFile:
    \tl_gclear:N \g__UWMad_RelativeDirectory_OptionalPath_tl
}
\DeclareDocumentCommand \IncludeSection { o m } {
    \IfValueTF { #1 } {
        \tl_gset:Nn \g__UWMad_RelativeDirectory_OptionalPath_tl {#1}
    } { }
    \tl_gset:Nn \g__UWMad_RelativeDirectory_File_CurrentName_tl {#2}
    \UWMad_RelativeDirectory_UpdateStack:n{Section}
    \UWMad_RelativeDirectory_IncludeFile:
    \tl_gclear:N \g__UWMad_RelativeDirectory_OptionalPath_tl
}
\DeclareDocumentCommand \IncludeSubsection { o m } {
    \IfValueTF { #1 } {
        \tl_gset:Nn \g__UWMad_RelativeDirectory_OptionalPath_tl {#1}
    } { }
    \tl_gset:Nn \g__UWMad_RelativeDirectory_File_CurrentName_tl {#2}
    \UWMad_RelativeDirectory_UpdateStack:n{Subsection}
    \UWMad_RelativeDirectory_IncludeFile:
    \tl_gclear:N \g__UWMad_RelativeDirectory_OptionalPath_tl
}
\DeclareDocumentCommand \IncludeGraphics { o m } {
    \tl_gset:Nn \g__UWMad_RelativeDirectory_File_CurrentName_tl {#2}
    \IfValueTF { #1 } {
        \UWMad_RelativeDirectory_IncludeGraphics:n{#1}
    } {
        \UWMad_RelativeDirectory_IncludeGraphics:n{}
    }
}
\cs_new_eq:NN
    \includegraphics
    \IncludeGraphics
%    \end{macrocode}
%
%   \iffalse
%</Code>
%   \fi
%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}
%   \Finale
\endinput
