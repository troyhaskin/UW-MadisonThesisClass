%<*UserGuide>
\UWFeature{Programming}
The \hyperref[Imp/Programming]{Programming} for this module outlines the programming layer used for the class.
There is a user-facing API but is not documented here as it is experimental.


\iffalse
\UWSubFeature{Utility Commands}

\begin{function}{
    \IfCommandExistsTF,
    \IfCommandDoesNotExistTF}
    \begin{syntax}
        \cs{IfCommandExistsTF}      \marg{command name}\marg{true code}\marg{false code}
        \cs{IfCommandDoesNotExistTF}\marg{command name}\marg{true code}\marg{false code}
    \end{syntax}
    These commands test if a command with \marg{command name} exists or doesn't and branches to the appropriate code.
\end{function}

\begin{function}{\IfEmptyTF}
    \begin{syntax}
        \cs{IfEmptyTF} \marg{object}\marg{true code}\marg{false code}
    \end{syntax}
    This commands takes an argument, performs a full expansion of it, and branches to the appropriate code if the expansion is blank or not (just spaces or not).
\end{function}

\begin{function}{\IfCommandEmptyTF}
    \begin{syntax}
        \cs{IfCommandEmptyTF}\marg{command}\marg{true code}\marg{false code}
    \end{syntax}
    This function takes a command, expands it once, and branches to the appropriate code if the expansion is blank or not (just spaces or not).
\end{function}

\begin{function}{}
    \begin{syntax}
    \end{syntax}
\end{function}

\begin{function}{}
    \begin{syntax}
    \end{syntax}
\end{function}

\begin{function}{}
    \begin{syntax}
    \end{syntax}
\end{function}

\begin{function}{}
    \begin{syntax}
    \end{syntax}
\end{function}
\fi


%</UserGuide>
%
%
%
%<*Implementation>
%<<Verbatim
%   \iffalse
%<*Code>
%   \fi
%
%   \UWModule{Programming}\label{Imp/Programming}
%   This section outlines the Programming module for the \UWMadClass{}.
%   It encompasses thin abstractions from the standard \LaTeXPL{}'s type
%   and collection systems and provides \LaTeXe{} abstractions for
%   several other features.
%
%
%
%   \UWSubModule{Utility Commands}
%
%   Define some messages for the rest of the module.
%    \begin{macrocode}
\msg_new:nnn {UWMadThesis} {Programming/UnregisteredVariable} {
    `#1'~is~not~a~registered~#2.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_DefineLocal:n~or~
    \string\UWMad_#2_DefineGlobal:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Undefined} {
    The~#2~`#1'~is~undefined.~~The~#2~must~be~defined~
    before~usage~by~the~function~\string\UWMad_#2_Define:n.
}
\msg_new:nnn {UWMadThesis} {Programming/Defined} {
    The~#2~`#1'~is~already~defined~and~will~not~altered.
}
%    \end{macrocode}
%
%
%
%   \begin{function} {
%       \UWMad_Hook_Prepend:cn,
%       \UWMad_Hook_Prepend:Nn}
%       \begin{syntax}
%           \cs{UWMad_Hook_Prepend:cn} \Arg{command name} \Arg{prepend code}
%           \cs{UWMad_Hook_Prepend:Nn} \meta{command} \Arg{prepend code}
%       \end{syntax}
%
%   These commands allow additional code to be prepended to a
%   specified command.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hook_Prepend:cn {
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}         {#2 \cs:w #1-Default:\cs_end:}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Prepend:Nn {
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {#2 \cs:w\string#1-Default:\cs_end:}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function} {
%       \UWMad_Hook_Append:cn,
%       \UWMad_Hook_Append:Nn}
%       \begin{syntax}
%           \cs{UWMad_Hook_Append:cn} \Arg{command name} \Arg{append code}
%           \cs{UWMad_Hook_Append:Nn} \meta{command} \Arg{append code}
%       \end{syntax}
%
%   These commands allow additional code to be appended to a
%   specified command.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hook_Append:cn {
    \cs_new_eq:cc  {#1-Default:} {#1}
    \cs_gset:cn    {#1:}        {\cs:w #1-Default:\cs_end: #2}
    \cs_undefine:c {#1}
    \cs_new_eq:cc  {#1}          {#1:}
}
\cs_new:Nn \UWMad_Hook_Append:Nn {
    \cs_new_eq:cN  {\string#1-Default:} #1
    \cs_gset:cn    {\string#1:}         {\cs:w\string#1-Default:\cs_end: #2}
    \cs_undefine:N  #1
    \cs_new_eq:Nc   #1          {\string#1:}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%   \begin{function} {
%       \UWMad_Definition_Swap:Nn,
%       \UWMad_Definition_Reset:N,
%       \UWMad_Definition_Swap:cn,
%       \UWMad_Definition_Reset:c}
%
%       \begin{syntax}
%           \cs{UWMad_Definition_Swap:Nn} \meta{command} \Arg{replacement code}
%           \cs{UWMad_Definition_Reset:N} \meta{command} 
%           \cs{UWMad_Definition_Swap:cn} \Arg{command name} \Arg{replacement code}
%           \cs{UWMad_Definition_Reset:c} \Arg{command name}
%       \end{syntax}
%
%   These commands \enquote{swap} in a new definition of a command and,
%   when called, reset it to it's default definition.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Definition_Swap:Nn {
    \cs_if_exist:NTF #1 {
        \cs_new_eq:cN  {\string#1-Default:}  #1
        \cs_gset_eq:Nc  #1 {#2}
    } {
        \cs_new:Nn #1 {#2}
    }
}
\cs_new:Nn \UWMad_Definition_Reset:N {
    \cs_if_exist:cTF {\string#1-Default:} {
        \cs_gset_eq:Nc  #1              {\string#1-Default:}
        \cs_undefine:c  {\string#1-Default:}
    } { }
}
\cs_generate_variant:Nn \UWMad_Definition_Swap:Nn {cn}
\cs_generate_variant:Nn \UWMad_Definition_Reset:N {c}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%
%   \begin{function}{
%       \UWMad_File_GetExtension:nNN}
%   \begin{syntax}
%   \cs{UWMad_File_GetExtension:nNN}\Arg{path}\meta{tl var 1}\meta{tl var 2}
%   \end{syntax}
%   Searches through the given \Arg{file path} for an extension identifier
%   (\texttt{.} by default) in the path.  If one is found, the path sans extension is 
%   assigned to \meta{tl var 1} with the extension assigned to \meta{tl var 2}.
%
%   Initializations of variables and booleans used in the function
%    \begin{macrocode}
\tl_gset:Nn \g__UWMad_File_ExtensionMarker_tl {.}
\tl_gset:Nn \g__UWMad_File_DirectoryMarker_tl {/}
%    \end{macrocode}
%
%   Define the body of the function.
%    \begin{macrocode}
\cs_new:Nn \UWMad_File_PathFileName:NNNn {
    
    %   Break possible directory chain and pop file name from right
    \seq_set_split:Nnn \l_tmpa_seq {g__UWMad_File_DirectoryMarker_tl} {#4}
    \seq_pop_right:NN  \l_tmpa_seq #2

    %   Check if a path was given
    \int_compare:nNnTF {\seq_count:N \l_tmpa_seq} > {0} {
        \tl_set:Nf #1 {
            \seq_use:Nn \l_tmpa_seq {\g__UWMad_File_DirectoryMarker_tl}
            \g__UWMad_File_DirectoryMarker_tl
        }
    } {
        \tl_clear:N #1
    }

    %   Check if an extension was given
    \tl_if_in:NnTF #2 {\g__UWMad_File_ExtensionMarker_tl} {
        \seq_set_split:NnV \l_tmpa_seq {\g__UWMad_File_ExtensionMarker_tl} {#2}
        \seq_get_right:NN  \l_tmpa_seq #3
        \tl_set:Nf #2 {
            \seq_use:Nn \l_tmpa_seq {\g__UWMad_File_DirectoryMarker_tl}
        }
    } {
        \tl_clear:N #3
    }
}
\cs_generate_variant:Nn \UWMad_File_PathFileName:NNNn {NNNx}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%   \begin{function}{
%       \__UWMad_IfDefined:nnnnT,
%       \__UWMad_IfUndefined:nnnnT}
%
%   \begin{syntax}
%       \cs{__UWMad_IfDefined:nnnnT}\Arg{Prefix}\Arg{ID}\Arg{Suffix}\Arg{Type}\Arg{Code}
%       \cs{__UWMad_IfUndefined:nnnnT}\Arg{Prefix}\Arg{ID}\Arg{Suffix}\Arg{Type}\Arg{Code}
%   \end{syntax}
%
%   These commands accept a \marg{Prefix}, an \marg{ID}, a \marg{Suffix},
%   a \marg{Type}, and \marg{Code}.  It determines if a command named by the
%   concatenation of \marg{Prefix}, \marg{ID}, and \marg{Suffix}
%   is defined or not and executes \marg{Code} depending on the existence.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nnnnT{
    \cs_if_exist:cTF {#1#2#3} {
        #5
    }{
            \msg_error:nnnn
                {UWMadThesis}
                {Programming/Undefined}
                {#2}
                {#4}
    }
}
\cs_new:Nn \__UWMad_IfUndefined:nnnnT{
    \cs_if_free:cTF {#1#2#3} {
        #5
    }{
            \msg_warning:nnnn
                {UWMadThesis}
                {Programming/Defined}
                {#2}
                {#4}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{
%       \__UWMad_IfDefined:nT,
%       \__UWMad_IfUndefined:nT}
%   \begin{syntax}
%       \cs{__UWMad_IfDefined:nT}\Arg{CommandName}\Arg{TrueCode}
%       \cs{__UWMad_IfUndefined:nT}\Arg{CommandName}\Arg{TrueCode}
%   \end{syntax}
%   These commands are simplifications of the above commands and
%   that only take a \marg{CommandName} and \marg{TrueCode}.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_IfDefined:nT{
    \_UWMad_IfDefined:nnnnT{}{#1}{}{command}{#2}
}
\cs_new:Nn \__UWMad_IfUndefined:nT{
    \_UWMad_IfUndefined:nnnnT{}{#1}{}{command}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%^^A ======================================================================= %
%^^A                     Collection Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubModule{Collections}
%   In the following subsections, commands that create and manipulate
%   various collection data types will be discussed.  The collections
%   currently implemented are stacks (LIFO),
%   queues (FIFO), deques (LIFO+FIFO), and hashes (key-value pairs).
%
%   All of the collection systems are thin abstractions of \LaTeXPL{}'s
%   \texttt{l3tl}, \texttt{l3seq}, and \texttt{l3prop} modules to avoid developing 
%   one-shot systems while allowing more endeavoring authors access to the
%   features without learning \LaTeX3{} programming if they load the
%   abstractions.
%
%
%
%
%
%
%^^A ======================================================================= %
%^^A                          Stack Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Stacks}
%   This set of commands is a simple system for creating and working with
%   stacks.  Stacks are a last-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) last 
%   pushed on to the stack is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a LIFO sense.
%
%
%
%   \begin{function}{
%       \__UWMad_Stack_IfDefined:nT,
%       \__UWMad_Stack_IfUndefined:nT}
%       \begin{syntax}
%           \cs{__UWMad_Stack_IfDefined:nT}\Arg{stack name}\Arg{true code}
%           \cs{__UWMad_Stack_IfUndefined:nT}\Arg{stack name}\Arg{true code}
%       \end{syntax}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Stack_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
\cs_new:Nn \__UWMad_Stack_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Stack_}{#1}{}{Stack}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Define:n}
%   Define a new Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Define:n {
    \__UWMad_Stack_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Clear:n}
%   Clear but do not undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Clear:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Delete:n}
%   Clear and undefine a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Delete:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gclear:c   {g__UWMad_Stack_#1}
        \cs_undefine:c {g__UWMad_Stack_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Push:nn}
%   Push a value on to a defined Stack.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Push:nn {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Stack_#1} {#2}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Pop:n}
%   Pop a value off a defined Stack and place it in the 
%   input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Pop:n {
    \__UWMad_Stack_IfDefined:nT {#1} {
        \tl_set:Nf \l_tmpa_tl          {\tl_head:c {g__UWMad_Stack_#1}}
        \tl_set:cf {g__UWMad_Stack_#1} {\tl_tail:c {g__UWMad_Stack_#1}}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Stack_Walk:nn}
%   Iterate of the elements of a defined Stack in a FILO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Stack_Walk:nn {
    \tl_map_inline:cn {g__UWMad_Stack_#1} {#2}
}
%    \end{macrocode}
%    \end{function}
%
%
%
%^^A ======================================================================= %
%^^A                          Queue Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Queues}
%   This set of commands is a simple system for creating and working with
%   queue.  Queues are a first-in first-out collection data type; this means
%   that the data element (in this any unexpanded token/token list) first 
%   pushed on to the queue is the first popped.  Data elements can also be
%   walked (iterated over) with an inline callback in a FIFO sense.
%
%
%
%   \begin{function} {
%       \__UWMad_Queue_IfDefined:nT,
%       \__UWMad_Queue_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Queue_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
\cs_new:Nn \__UWMad_Queue_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Queue_}{#1}{}{Queue}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Define:n}
%   Define a new Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Define:n {
    \__UWMad_Queue_IfUndefined:nT {#1} {
        \tl_new:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Clear:n}
%   Clear but do not undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Clear:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Delete:n}
%   Clear and undefine a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Delete:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gclear:c    {g__UWMad_Queue_#1}
         \cs_undefine:c {g__UWMad_Queue_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Pop:nn}
%   Push an item on to the start of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Push:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_gput_left:cn {g__UWMad_Queue_#1} {{#2}}
    }
}
%
%
\cs_generate_variant:Nn \tl_head:N { c }
\cs_generate_variant:Nn \tl_tail:N { c }
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Pop:n}
%   Pop an item from the end of a defined Queue
%   and place it in the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Pop:n {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_set:Nf \l_tmpa_tl
            {\tl_head:c {g__UWMad_Queue_#1}}
        \tl_set:cf      {g__UWMad_Queue_#1}
            {\tl_tail:c {g__UWMad_Queue_#1}}
        \tl_reverse:c   {g__UWMad_Queue_#1}
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_Walk:nn}
%   Iterate of the elements of a defined Queue in a FIFO sense
%   with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_Walk:nn {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \group_begin:
            \tl_reverse:c     {g__UWMad_Queue_#1}
            \tl_map_inline:cn {g__UWMad_Queue_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Queue_IfEmpty:nTF}
%   Execute true/false code depending on the emptiness
%   of a defined Queue.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Queue_IfEmpty:nTF {
    \__UWMad_Queue_IfDefined:nT {#1} {
        \tl_if_empty:cTF {g__UWMad_Queue_#1}{
            #2
        }{
            #3
        }
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%^^A ======================================================================= %
%^^A                          Deque Creation Commands                        %
%^^A ======================================================================= %
%
%   \UWSubSubModule{Deques}
%   This set of commands is a simple system for creating and working with
%   double-ended queues (deques, pronounced \textit{deck}).  Deques are a
%   generalization of stacks and queues in that data can be pushed, popped,
%   and walked from either end of the list (i.e., LIFO+FIFO).
%
%
%
%   \begin{function} {
%       \__UWMad_Deque_IfDefined:nT,
%       \__UWMad_Deque_IfUndefined:nT}
%   Shortcuts for the more general  commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Deque_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
\cs_new:Nn \__UWMad_Deque_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Deque_}{#1}{}{Deque}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Define:n}
%   Define a new Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Define:n {
    \__UWMad_Deque_IfUndefined:nT {#1} {
        \seq_new:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Clear:n}
%   Clear but do not undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Clear:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Deque_Delete:n}
%   Clear and undefine a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_Delete:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gclear:c  {g__UWMad_Deque_#1}
        \cs_undefine:c {g__UWMad_Deque_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_PushLeft:nn,
%       \UWMad_Deque_PushRight:nn}
%   Push an element on to the left or right of a defined Deque.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PushLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_left:cn  {g__UWMad_Deque_#1} {#2}
    }
}
\cs_new:Nn \UWMad_Deque_PushRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gput_right:cn {g__UWMad_Deque_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_PopLeft:nn,
%       \UWMad_Deque_PopRight:nn}
%   Pop an element from the left or right of a defined Deque
%   and place it into the input stream.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_PopLeft:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_left:cN  {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
\cs_new:Nn \UWMad_Deque_PopRight:n {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_gpop_right:cN {g__UWMad_Deque_#1} \l_tmpa_tl
        \tl_use:N \l_tmpa_tl
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{
%       \UWMad_Deque_WalkLeftToRight:nn,
%       \UWMad_Deque_WalkRightToLeft:nn}
%   Iterate over the elements left-to-right or right-to-left
%   of a defined Deque with supplied code.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Deque_WalkLeftToRight:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
    }
}
\cs_generate_variant:Nn \seq_reverse:N {c}
\cs_new:Nn \UWMad_Deque_WalkRightToLeft:nn {
    \__UWMad_Deque_IfDefined:nT {#1} {
        \group_begin:
            \seq_reverse:c     {g__UWMad_Deque_#1}
            \seq_map_inline:cn {g__UWMad_Deque_#1} {#2}
        \group_end:
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%^^A =========================================================================== %
%^^A                 Hashes (Associative Arrays) with LaTeX3                     %
%^^A =========================================================================== %
%
%   \UWSubSubModule{Hashes}
%   This set of commands is a simple system for creating and working with
%   hashes (more often called associative arrays or dictionaries, but erring
%   on the side of usablility, Ruby's jargon will be used). Hashes are a
%   type of array that indexes values by (at least in \LaTeX{}) alphanumeric
%   keys instead of just integers.
%   Data can be set by key, retrieved by key, unset by key, deleted, and walked.
%
%   A hash walk, like the collection walks above, iterates through all of the
%   keys and values in the hash while applying a user supplied function.
%   However, unlike the collection walks, \textbf{a hash's walk order is not
%   gauranteed to be the set order}.  If walk order is needed to be
%   gauranteed, see the previous collection data types.
%
%   The system is a thin abstraction of \LaTeXPL's
%   \texttt{l3prop} module to avoid developing a one-shot system while allowing more
%   endeavoring authors access to the feature without learning \LaTeX3{}
%   programming.
%
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_gput:Nnn   { c x n   }
\cs_generate_variant:Nn \prop_if_in:NnTF { c x TF  }
\cs_generate_variant:Nn \prop_if_in:NnTF { c f TF  }
\cs_generate_variant:Nn \prop_item:Nn    { c x     }
\cs_generate_variant:Nn \prop_item:Nn    { c f     }
\cs_generate_variant:Nn \prop_get:NnNTF  { c x N TF}
\cs_generate_variant:Nn \prop_gremove:Nn { c x     }
%    \end{macrocode}
%
%
%   \begin{function} {
%       \__UWMad_Hash_IfDefined:nT,
%       \__UWMad_Hash_IfUndefined:nT}
%   Shortcuts for the more general commands outlined above.
%
%    \begin{macrocode}
\cs_new:Nn \__UWMad_Hash_IfDefined:nT {
    \__UWMad_IfDefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
\cs_new:Nn \__UWMad_Hash_IfUndefined:nT{
    \__UWMad_IfUndefined:nnnnT{g__UWMad_Hash_}{#1}{}{Hash}{#2}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Define:n}
%   Define a new Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Define:n {
    \__UWMad_Hash_IfUndefined:nT {#1} {
        \prop_new:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Set:nnn}
%   Set the value of a key of a defined Hash.
%
%   \begin{syntax}
%       \cs{UWMad_Hash_Set:nnn}\marg{HashID}\marg{Key}\marg{Value}
%   \end{syntax}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Set:nnn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gput:cxn {g__UWMad_Hash_#1}{#2}{#3}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Get:nn}
%   Get the value of a key of a defined Hash and place
%   it into the input stream.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \prop_item:cn {cf}
\cs_new:Nn \UWMad_Hash_Get:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_item:cf {g__UWMad_Hash_#1}{#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Unset:nn}
%   Undefine a key-value pair in a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Unset:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gremove:cx {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_IfKeySet:nnTF}
%   Execute true/false code depending on if a key is set in
%   a defined Hash.
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_to_lowercase:n {f}
\cs_new:Nn \UWMad_Hash_IfKeySet:nnTF {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_if_in:cfTF {g__UWMad_Hash_#1} {\tl_trim_spaces:n{#2}} {
            #3
        }{
            #4
        }
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Walk:nn}
%   Iterate over the key-value pairs of a defined Hash with
%   supplied code. \textbf{No order is gauranteed.}
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Walk:nn {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_map_inline:cn {g__UWMad_Hash_#1} {#2}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\UWMad_Hash_Delete:n}
%   Clear and undefine a defined Hash.
%
%    \begin{macrocode}
\cs_new:Nn \UWMad_Hash_Delete:n {
    \__UWMad_Hash_IfDefined:nT {#1} {
        \prop_gclear:c {g__UWMad_Hash_#1}
        \cs_undefine:c {g__UWMad_Hash_#1}
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%^^A ==================================================================== %
%^^A                         LaTeX2e Abstractions                         %
%^^A ==================================================================== %
%
%   \UWSubModule{User-Level Abstractions}
%
%   The commands that follow are \LaTeXe{}-like commands that use the
%   \LaTeXPL{} as the underlying system.  \textbf{The commands are not loaded
%   by default; they must be invoked by calling the following command.}
%
%
%   \UWSubSubModule{Utility Commands}
%
%
%   \begin{function}{\IfCommandExists,\IfCommandDoesNotExist}
%   This command pair is used instead of \LaTeX{}'s \cs{@ifundefined}.
%   Since it is \eTeX{}, this command will allow for a switch to
%   \cs{@ifundefined} if problems arise from non-\eTeX{} users in the
%   future.
%
%   \begin{syntax}
%       \cs{IfCommandExists}\marg{Command Name}\marg{True}\marg{False}
%       \cs{IfCommandDoesNotExist}\marg{Command Name}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandExistsTF { m +m +m } {
    \cs_if_exist:cTF {#1}{
        #2
    }{
        #3
    }
}
\DeclareDocumentCommand \IfCommandDoesNotExistTF { m +m +m } {
    \cs_if_free:cTF {#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\IfStringEmpty}
%   Checks if a given string is composed of no characters or just blank spaces.
%
%   \begin{syntax}
%       \cs{IfStringEmpty}\marg{String}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \tl_if_blank:nTF {fTF}
\DeclareDocumentCommand \IfEmptyTF { m +m +m } {
    \tl_if_blank:fTF {#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\IfCommandEmpty}
%   Determines if a commands contains no or only space after one expansion.
%
%   \begin{syntax}
%       \cs{IfCommandEmpty}\marg{Command}\marg{True}\marg{False}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \IfCommandEmptyTF { m +m +m }{
    \tl_if_blank:oTF{#1}{
        #2
    }{
        #3
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%
%^^A ==================================================================== %
%^^A                      Command Creator System                          %
%^^A ==================================================================== %
%
%   \UWSubSubModule{Command Creators}
%
%
%   \begin{function}{\MakeCommand,\ReMakeCommand}
%   If the requested command is not defined, \cs{MakeCommand} will create it;
%   however, if the requested command is already defined, \cs{MakeCommand} will
%   throw a warning and not make the command.
%   If the requested command is defined, \cs{ReMakeCommand} will redefine it;
%   however, if the requested command is not defined, \cs{ReMakeCommand} will
%   throw a warning and not make the command.
%
%   \begin{syntax}
%       \cs{MakeCommand}\marg{Command Name}\marg{Code}
%       \cs{ReMakeCommand}\marg{Command Name}\marg{Code}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommand { O{} m +m } {
    \cs_if_free:cTF {#2} {
        \cs_set:cpn {#2} #1 {#3}
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{#2}{command}
    }
}
\DeclareDocumentCommand \ReMakeCommand { O{} m +m }{
    \cs_if_exist:cTF {#2} {
        \cs_set:cpn {#2} #1 {#3}
    }{
        \msg_error:nnnn
            {UWMadThesis}{Programming/Undefined}{#2}{command}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\MakeGlobalCommand}
%   Similar to \cs{MakeCommand} except the creation is made regardless of the
%   requested command's definition and the creation is global.
%
%   \begin{syntax}
%       \cs{MakeGlobalCommand}\marg{Command Name}\marg{Code}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeGlobalCommand { O{} +m m } {
    \cs_gset:cpn {#2} #1 {#3}
}
%    \end{macrocode}
%   \end{function}
%
%
%   \begin{function}{\MakeCommandUndefined}
%   Globally undefines the command specified by \marg{Command Name}.
%
%   \begin{syntax}
%       \cs{MakeCommandUndefined}\marg{Command Name}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \MakeCommandUndefined { m } {
    \cs_undefine:c {#1}
}
%    \end{macrocode}
%   \end{function}
%
%
%
%   \begin{function}{\CopyCommand}
%   Copies the defintion of the command named \marg{Command Name 1} to 
%   a new command named \marg{Command Name 2}.  If \marg{Command Name 2}
%   already has a definition, \cs{CopyCommand} will throw a warning
%   \emph{but} still make the copy.
%
%   \begin{syntax}
%       \cs{CopyCommand}\marg{Command Name 1}\marg{Command Name 2}
%   \end{syntax}
%
%    \begin{macrocode}
\DeclareDocumentCommand \CopyCommand { m m } {
    \cs_if_free:cTF {#1} {
        \cs_if_free:cTF {#2} {
            \cs_gset_eq:cc {#2}{#1}
        }{
            \msg_warning:nnnn
                {UWMadThesis}{Programming/Defined}{#2}{command}
        }
    }{
        \msg_warning:nnnn
            {UWMadThesis}{Programming/Defined}{#1}{command}
    }
}
%    \end{macrocode}
%   \end{function}
%
%
%
%
%
%   \UWSubSubModule{Types}
%
%   \begin{function}{
%       \CreateBoolean,
%       \CreateBooleanTrue,
%       \CreateBooleanFalse,
%       \SetBooleanTrue,
%       \SetBooleanFalse,
%       \IfBooleanTrueTF,
%       \IfBooleanFalseTF}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateBoolean { m } {
    \bool_new:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \CreateBooleanTrue { m } {
    \bool_new:c       {g__UWMad_Programming_API_#1_bool}
    \bool_gset_true:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \CreateBooleanFalse { m } {
    \bool_new:c        {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \SetBooleanTrue { m } {
    \bool_gset_true:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \SetBooleanFalse { m } {
    \bool_gset_false:c {g__UWMad_Programming_API_#1_bool}
}
\DeclareDocumentCommand \IfBooleanTrueTF { m +m +m } { 
    \bool_if:cTF {g__UWMad_Programming_API_#1_bool} {
        #2
    } {
        #3
    }
}
\DeclareDocumentCommand \IfBooleanFalseTF { m +m +m } { 
    \bool_if:cTF {g__UWMad_Programming_API_#1_bool} {
        #3
    } {
        #2
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%   \begin{function}{
%       \CreateLength,
%       \AddToLength,
%       \SetLength,
%       \ValueOfLength,
%       \IfLengthTF}
%   \LaTeXe{} version of the Boolean Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateLength { m m } {
    \dim_new:c   {g__UWMad_Programming_API_#1_dim}
    \dim_gset:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \AddToLength { m m } {
    \dim_gadd:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \SetLength { m m } {
    \dim_gset:cn {g__UWMad_Programming_API_#1_dim} {#2}
}
\DeclareDocumentCommand \ValueOfLength { m } {
    \dim_use:c {g__UWMad_Programming_API_#1_dim}
}
\DeclareDocumentCommand \IfLengthTF { m m m +m +m } {
    \dim_compare:nNnTF {#1} #2 {#3} {
        #4
    } {
        #5
    }
}
%    \end{macrocode}
%    \end{function}
%
%
%
%   \begin{function}{
%       \CreateCounter,
%       \AddToCounter,
%       \StepCounter,
%       \SetCounter,
%       \ValueOfCounter,
%       \IfCounterTF,
%       \CounterToArabic,
%       \CounterToALPHA,
%       \CounterToAlpha,
%       \CounterToROMAN,
%       \CounterToRoman}
%   \LaTeXe{} version of the Counter Type system above.
%    \begin{macrocode}
\DeclareDocumentCommand \CreateCounter { m m } {
    \int_new:c   {g__UWMad_Programming_API_#1_int}
    \int_gset:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \AddToCounter { m m } {
    \int_gadd:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \StepCounter { m m } {
    \int_gincr:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \SetCounter { m m } {
    \int_gset:cn {g__UWMad_Programming_API_#1_int} {#2}
}
\DeclareDocumentCommand \ValueOfCounter { m m } {
    \int_use:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \IfCounterTF { m m m +m +m } {
    \int_compare:nNnTF {#1} {#2} {#3} {
        #4
    } {
        #5
    }
}
\DeclareDocumentCommand \CounterToArabic { m } {
    \int_to_arabic:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToALPHA { m } {
    \int_to_Alph:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToAlpha { m } {
    \int_to_alph:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToROMAN { m } {
    \int_to_Roman:c {g__UWMad_Programming_API_#1_int}
}
\DeclareDocumentCommand \CounterToRoman { m } {
    \int_to_roman:c {g__UWMad_Programming_API_#1_int}
}
%    \end{macrocode}
%    \end{function}
%
%
%
%
%
%
%   \iffalse
%</Code>
%   \fi
%Verbatim
%</Implementation>