%<*UserGuide>
\UWFeature{Math}\label{UG:Math}
As the feature name may suggest, all of the commands in this section deal with mathematical typesetting.

% ===================================================================== %
%                             Derivative Commands                       %
% ===================================================================== %
\UWSubFeature{Derivative Commands}
These command set deal with quick and easy typesetting of derivatives.

\begin{function}{\deriv , \pderiv , \tderiv}
    \begin{syntax}
        \cs{deriv}  \marg{function} \marg{variable} \marg{order}    \\
        \cs{pderiv} \marg{function} \marg{variable} \marg{order}    \\
        \cs{tderiv} \marg{function} \marg{variable} \marg{order}
    \end{syntax}
    This function set is meant to typeset three different kinds of derivatives: ordinary, partial, and total (i.e., material or Lagragian).
    The only difference between them is the differential symbol: \cs{deriv} uses `$\derivSymbol$', \cs{pderiv} uses `$\pderivSymbol$', and \cs{tderiv} used `$\tderivSymbol$'.
\end{function}

    These commands typeset the derivative of a given \Arg{function} with respect to \Arg{variable} of $n$-th \Arg{order} using Leibniz's notation.
    The \Arg{order} is optional and defaults to empty (first derivative).
    For example, the input
    \begin{verbatim}
        \begin{align}
            \deriv{y}{x}{2} + \deriv{y}{x} + y(x)         &= 0    \\[0.50em]
            \pderiv{T}{t} - \alpha \pderiv{T}{z}{2}       &= 0    \\[0.50em]
            \tderiv{\rho{u}}{t} + \pderiv{P}{z}  - \rho g &= 0
        \end{align}
    \end{verbatim}
    and is typeset as
        \begin{align}
            \deriv{y}{x}{2} + \deriv{y}{x} + y(x)         &= 0    \\[0.50em]
            \pderiv{T}{t} - \alpha \pderiv{T}{z}{2}       &= 0    \\[0.50em]
            \tderiv{(\rho{u})}{t} + \pderiv{P}{z}  - \rho g &= 0
        \end{align}



\begin{function}{\derivbig,\pderivbig,\tderivbig}
    \begin{syntax}
        \cs{derivbig}   \oarg{left delim} \Arg{function} \oarg{right delim} \Arg{variable} \Arg{order} \\
        \cs{pderivbig}  \oarg{left delim} \Arg{function} \oarg{right delim} \Arg{variable} \Arg{order} \\
        \cs{tderivbig}  \oarg{left delim} \Arg{function} \oarg{right delim} \Arg{variable} \Arg{order}
    \end{syntax}
    This function set is identical to the non-	\texttt{big} versions above, except that \Arg{function} is placed to the right of the derivative operator and wrapped by \cs{left} and \cs{right}.
\end{function}
    The default delimiters for the stretch commands are `[' and ']', and either can be individually overridden via the two optional arguments.
    For example, the input
    \begin{verbatim}
        \begin{align}
            -\derivbig{ p(x) \deriv{y}{x} }{x} + 
                    q(x) (1 - \lambda) y(x)  &= 0 \\[0.50em]
            \tderivbig{ \rho{i} + \frac{1}{2} \rho u^2 }[(]{t} - 
                    \pderivbig[\lvert]{ \kappa \pderiv{T}{z} }{z} &= 0
        \end{align}
    \end{verbatim}
    and is typeset as
        \begin{align}
            -\derivbig{ p(x) \deriv{y}{x} }{x} + 
                    q(x) (1 - \lambda) y(x)  &= 0 \\[0.50em]
            \tderivbig{ \rho{i} + \frac{1}{2} \rho u^2 }[(]{t} - 
                    \pderivbig[\lvert]{ \kappa \pderiv{T}{z} }{z} &= 0
        \end{align}

\begin{function}{\DerivativeGeneral,\DerivativeGeneralBig}
    \begin{syntax}
        \cs{DerivativeGeneral}     \Arg{function} \Arg{variable} \Arg{order} \Arg{symbol}
        \cs{DerivativeGeneralBig}  \Arg{function} \Arg{variable} \Arg{order} \Arg{symbol} \Arg{left delim} \Arg{right delim}
    \end{syntax}
    These commands are lower-level commands used by the \texttt{deriv} family above.
    All of the arguments are mandatory.
    If a change to the general style of the derivatives or another version of the \texttt{deriv} family is desire, these commands are available for usage.
\end{function}

\begin{function}{\derivSymbol,\pderivSymbol,\tderivSymbol}
    \begin{syntax}
        \cs{derivSymbol}
    \end{syntax}
    These commands take no arguments and expand to the current symbol used for the associated \texttt{deriv} command.
    The defaults require math mode to be typeset.
    Therefore, \texttt{\$\cs{pderivSymbol}\$} will be appear as $\pderivSymbol$.
\end{function}


\begin{function}{\derivSymbolChange,\pderivSymbolChange,\tderivSymbolChange}
    \begin{syntax}
        \cs{derivSymbolChange} \Arg{symbol} \\[0.50em]
    \end{syntax}
    These commands will \textsc{temporarily} change the symbol used by the associated \texttt{deriv} commands.
    The symbol will revert back to the original, default value after leaving the \TeX{} group where the switch was made (more often than not for \LaTeX{} users, this means ``upon exiting an environment'').
    For example:
    \begin{verbatim}
        \begin{equation}
            \deriv{U}{t} =
            \derivSymbolChange{\delta}
            \deriv{Q}{t} - \deriv{W}{t}
        \end{equation}
    \end{verbatim}
    typesets as
    \begin{equation}
            \deriv{U}{t} =
            \derivSymbolChange{\delta}
            \deriv{Q}{t} - \deriv{W}{t}
    \end{equation}
    and now, after the environment, the \cs{derivSymbol} is once again `$\derivSymbol$'.
\end{function}

\begin{function}{
    \derivSymbolChangeDefault,
    \pderivSymbolChangeDefault,
    \tderivSymbolChangeDefault}
    \begin{syntax}
        \cs{derivSymbolChangeDefault}  \Arg{symbol}
        \cs{pderivSymbolChangeDefault} \Arg{symbol}
        \cs{tderivSymbolChangeDefault} \Arg{symbol}
    \end{syntax}

    These commands will \textsc{permanently} change the symbol used by the associated \texttt{deriv} commands.
    For example:
    \begin{verbatim}
        \begin{equation}
            \deriv{U}{t} =
            \derivSymbolChangeDefault{\delta}
            \deriv{Q}{t} - \deriv{W}{t}
        \end{equation}
    \end{verbatim}
    typesets as
    \begin{equation}
            \deriv{U}{t} =
            \derivSymbolChangeDefault{\delta}
            \deriv{Q}{t} - \deriv{W}{t}
    \end{equation}
    and now, after the environment, the \cs{derivSymbol} is `$\derivSymbol$'.
\end{function}



\begin{function}{\DelimiterChangeDefault}
    \begin{syntax}
        \cs{DelimiterChangeDefault} \Arg{left delim} \Arg{right delim}
    \end{syntax}
    This command changes the default delimiters used by the \texttt{big} commands above.
    Any valid delimiters can be used.
    For example:
    \begin{verbatim}
        \DelimiterChangeDefault{(}{)}
        \begin{equation}
            -\derivbig{ p(x) \deriv{y}{x} }{x} + 
                    q(x) (1 - \lambda) y(x) = 0 \\[0.50em]
        \end{equation}
    \end{verbatim} 
    and is typeset as
    \DelimiterChangeDefault{(}{)}
    \begin{equation}
        -\derivbig{ p(x) \deriv{y}{x} }{x} + 
                q(x) (1 - \lambda) y(x) = 0 \\[0.50em]
    \end{equation}
    and notice that the \cs{derivSymbol} is still $\derivSymbol$.
\end{function}





% ===================================================================== %
%                                 Operators                             %
% ===================================================================== %
\UWSubFeature{Operators}
These operators are added to the standard set using the \AmS{} operator system.
Some are new while others are simply in a camel-cased versions of the standard ones.

\begin{function}{\Sup,\Inf}
    Supremum and Infinum operators using the math operator system.
    For example, the input
    \begin{verbatim}
        \begin{align}
            \Inf_{x \in \mathbb{R}} \{0 < x  < 1\} &= 0 \\[0.50em]
            \Sup_{x \in \mathbb{R}} \{0 < x  < 1\} &= 1
        \end{align}
    \end{verbatim}
    is typeset as
    \begin{align}
        \Inf_{x \in \mathbb{R}} 
            \{0 \LessThan x \LessThan 1\} &= 0 \\[0.50em]
        \Sup_{x \in \mathbb{R}}
            \{0 \LessThan x \LessThan 1\} &= 1
    \end{align}
\end{function}

\begin{function}{\Lim}
    The limit operator:
    \begin{verbatim}
        \begin{equation}
            \Lim_{n \rightarrow \infty} \left(1 + \frac{1}{n}\right)^n
            = \mathrm{e}
        \end{equation}
    \end{verbatim}
    is typeset as
        \begin{equation}
            \Lim_{n \rightarrow \infty} \left(1 + \frac{1}{n}\right)^n
            = \mathrm{e}
        \end{equation}
\end{function}

\begin{function}{\Min,\Max}
    The maximum and minimum value operators
    \begin{verbatim}
        \begin{equation}
            \begin{align}
                \Min_{x \in \mathbb{R}} \Sin(x) &= -1 \\[0.50em]
                \Max_{x \in \mathbb{R}} \Sin(x) &= +1
            \end{align}
        \end{equation}
    \end{verbatim}
    is typeset as
    \begin{align}
        \Min_{x \in \mathbb{R}} \Sin(x) &= -1 \\[0.50em]
        \Max_{x \in \mathbb{R}} \Sin(x) &= +1
    \end{align}
\end{function}

\begin{function}{\ArgMin,\ArgMax}
    The maximum and minimum argument operators
    \begin{verbatim}
        \begin{equation}
            \begin{align}
                \ArgMin_{x \in \mathbb{R}} \Sin(x) &= \frac{3\pi}{2} + 2 \pi n \\[0.50em]
                \ArgMax_{x \in \mathbb{R}} \Sin(x) &= \frac{\pi}{2} + 2 \pi n
            \end{align}
        \end{equation}
    \end{verbatim}
    is typeset as
    \begin{align}
                \ArgMin_{x \in \mathbb{R}} \Sin(x) &= \frac{3\pi}{2} + 2 \pi n \\[0.50em]
                \ArgMax_{x \in \mathbb{R}} \Sin(x) &= \frac{\pi}{2} + 2 \pi n
    \end{align}
\end{function}

\begin{function}{\Abs,\Ln,\Log,\Exp}
    Common set of operators in uppercase form.
\end{function}

\begin{function}{\Cos,\Sin,\Tan,\Sec,\Csc,\Cot}
    Standard trigonometric functions and their reciprocals.
\end{function}
\begin{function}{\Cosh,\Sinh,\Tanh,\Sech,\Csch,\Coth}
    Hyperbolic trigonometric functions and their reciprocals.
\end{function}
\begin{function}{\ArcCos,\ArcSin,\ArcTan,\ArcSec,\ArcCsc,\ArcCot}
    Standard inverse trigonometric functions and their reciprocals.
\end{function}
\begin{function}{\ArcCosh,\ArcSinh,\ArcTanh,\ArcSech,\ArcCsch,\ArcCoth}
    Hyperbolic inverse trigonometric functions and their reciprocals.
\end{function}



% ===================================================================== %
%                          Miscellaneous Commands                       %
% ===================================================================== %
\UWSubFeature{Miscellaneous Commands}

\begin{function}{\Sqrt}
    \begin{syntax}
        \cs{Sqrt} \oarg{n} \Arg{argument}
    \end{syntax}
    This command typesets the \oarg{n}-th root of a given \Arg{argument} with a closing tail.
    This command differs from the default \cs{sqrt} in appearance only:
    \begin{equation}
        \sqrt[3]{\frac{f(x)}{g(x)}} = \Sqrt[3]{\frac{f(x)}{g(x)}}
    \end{equation}
\end{function}

\begin{function}{\IfMathModeTF}
    \begin{syntax}
        \cs{IfMathModeTF} \Arg{math mode code} \Arg{text mode code}
    \end{syntax}
    This is an abstraction of \texttt{expl3}'s \verb|\mode_if_math:TF| function.
    It was added to give more control on the following \cs{subs} and \cs{sups} commands since \texttt{expl3}'s syntax is disabled to make \texttt{_} a subscript shift and not a letter.
\end{function}

\begin{function}{\subs,\sups,\subsups}
    \begin{syntax}
        \cs{subs}    \oarg{space} \Arg{text subscript} \\[0.50em]
        \cs{sups}    \oarg{space} \Arg{text superscript} \\[0.50em]
        \cs{subsups} \oarg{subscript space} \Arg{text subscript} \oarg{superscript space} \Arg{text superscript}
    \end{syntax}
    These command typeset a subscript or superscript \textsc{in text mode}.
    They are useful if the subscript or superscript are not variable, and therefore should be in non-math text, or for making subscripts or superscripts in text mode.
    The optional argument \oarg{space} is meant for adjusting the spacing of the scripts and exists in \textsc{in math mode}, so technically, any valid math statement can be used.
    However, it is encouraged to only use this argument for spacing.
    For example, the input \verb|`T\subs{P}, $T\subs{P}$, $T_P$'| is typeset as `T\subs{P}, $T\subs{P}$, $T_P$', and the input \verb|`T\subs[\!]{P}, T\subs[\:]{P}'| is typeset as `T\subs[\!]{P}, T\subs[\:]{P}'.
    T\sups{P}
\end{function}

\begin{function}{\OneOver,\oneo}
    \begin{syntax}
        \cs{OneOver}  \Arg{denominator}
    \end{syntax}
    A simple command the typesets a fraction whose numerator is always one.
    For example, the input
    \begin{verbatim}
        \begin{equation}
            \OneOver{\Sqrt{x^2 + 1}}
        \end{equation}
    \end{verbatim}
    is typeset as
        \begin{equation}
            \OneOver{\Sqrt{x^2 + 1}}
        \end{equation}
\end{function}

\begin{function}{\dd}
    \begin{syntax}
        \cs{dd}  \Arg{variable}
    \end{syntax}
    A simple command the typesets a non-math `d' in math mode and is meant to be used for differentials.
    For example, the input
    \begin{verbatim}
        \derivSymbolChangeDefault{\mathrm{d}}
        \begin{equation}
            f(b) - f(a) = \int_a^b \deriv{f}{t} \dd{t}
        \end{equation}
    \end{verbatim}
    is typeset as
        \derivSymbolChangeDefault{\mathrm{d}}
        \begin{equation}
            f(b) - f(a) = \int_a^b \deriv{f}{t} \dd{t}
        \end{equation}
\end{function}

\begin{function}{\dprime,\tprime}
    \begin{syntax}
        \cs{dprime}
    \end{syntax}
    These commands take no arguments and simply mean `double prime' and `triple prime'.
    For example, the input
    \begin{verbatim}
        \begin{equation}
            q^\prime = q^\dprime 2\pi{R} = q^\tprime \pi{R^2}
        \end{equation}
    \end{verbatim}
    is typeset as
        \begin{equation}
            q^\prime = q^\dprime 2\pi{R} = q^\tprime \pi{R^2}
        \end{equation}
\end{function}


%</UserGuide>
%
%
%
%
%
%
%<*Implementation>
%<<Verbatim
%   \iffalse
%<*Code>
%   \fi
%
%
%   \UWModule{Math}
%
%
%
%   We default the \cs{frac} command to a display style for all display
%   environments.
%    \begin{macrocode}
\tex_everydisplay:D \exp_after:wN {
    \tex_the:D \tex_everydisplay:D
    \cs_set_eq:NN \frac \dfrac
}
%    \end{macrocode}
%
%
%
%
%   \UWSubModule{Derivative Commands}
%   Define the token list variables for the three supported derivative types.
%    \begin{macrocode}
\tl_new:N   \g_UWMad_Math_derivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_derivSymbol_tl   {\mathrm{d}}
\tl_new:N   \g_UWMad_Math_pderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl  {\partial}
\tl_new:N   \g_UWMad_Math_tderivSymbol_tl
\tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl  {\mathrm{D}}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultLeft_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultLeft_tl  {[}
\tl_new:N   \g_UWMad_Math_DelimiterDefaultRight_tl
\tl_gset:Nn \g_UWMad_Math_DelimiterDefaultRight_tl {]}
\tl_new:N   \l_UWMad_Math_DelimiterLeft_tl
\tl_new:N   \l_UWMad_Math_DelimiterRight_tl
%    \end{macrocode}
%
%
%   Define the user interface accessors.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbol { } {
    \g_UWMad_Math_derivSymbol_tl
}
\DeclareDocumentCommand \pderivSymbol { } {
    \g_UWMad_Math_pderivSymbol_tl
}
\DeclareDocumentCommand \tderivSymbol { } {
    \g_UWMad_Math_tderivSymbol_tl
}
%    \end{macrocode}
%
%
%   Define the user interface local mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChange { m } {
    \tl_set:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%    \end{macrocode}
%
%
%   Define the user interface global mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \derivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_derivSymbol_tl {#1}
}
\DeclareDocumentCommand \pderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_pderivSymbol_tl {#1}
}
\DeclareDocumentCommand \tderivSymbolChangeDefault { m } {
    \tl_gset:Nn \g_UWMad_Math_tderivSymbol_tl {#1}
}
%    \end{macrocode}
%
%
%   Define the \cs{left} and \cs{right} delimiter global mutators.
%    \begin{macrocode}
\DeclareDocumentCommand \DelimiterChangeDefault { m m } {
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultLeft_tl  {#1}
    \tl_gset:Nn  \g_UWMad_Math_DelimiterDefaultRight_tl {#2}
}
%    \end{macrocode}
%
%
%   Define the generic regular and big derivative functions.
%    \begin{macrocode}
\DeclareDocumentCommand \DerivativeGeneral { +m +m m m } {
    \frac{ #4^{#3} #1      }
         { #4      #2^{#3} }
}
\DeclareDocumentCommand \DerivativeGeneralBig { +m +m m m m m} {

    \IfNoValueTF {#5} {
        \tl_set_eq:NN 
            \l_UWMad_Math_DelimiterLeft_tl
            \g_UWMad_Math_DelimiterDefaultLeft_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterLeft_tl {#5}
    }

    \IfNoValueTF {#6} {
        \tl_set_eq:NN 
            \l_UWMad_Math_DelimiterRight_tl
            \g_UWMad_Math_DelimiterDefaultRight_tl
    } {
        \tl_set:Nn \l_UWMad_Math_DelimiterRight_tl {#6}
    }

    \frac{ #4^{#3}    }
         { #4 #2^{#3} }
    \!\!
    \left\l_UWMad_Math_DelimiterLeft_tl
        #1 
    \right\l_UWMad_Math_DelimiterRight_tl
}
%    \end{macrocode}
%
%
%   Define the three supported derivative types' small forms.
%    \begin{macrocode}
\DeclareDocumentCommand \deriv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\derivSymbol}
}
\DeclareDocumentCommand \pderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\pderivSymbol}
}
\DeclareDocumentCommand \tderiv { +m +m G{} } {
    \DerivativeGeneral
        {#1}{#2}{#3}{\tderivSymbol}
}
%    \end{macrocode}
%
%
%   Define the three supported derivative types' big forms.
%    \begin{macrocode}
\DeclareDocumentCommand \derivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\derivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \pderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\pderivSymbol}{#1}{#3}
}
\DeclareDocumentCommand \tderivbig { o +m o +m G{} } {
    \DerivativeGeneralBig
        {#2}{#4}{#5}{\tderivSymbol}{#1}{#3}
}
%    \end{macrocode}
%
%   \UWSubModule{Operators and Functions}
%   Define all of the operators and function described in the user manual.
%    \begin{macrocode}
\DeclareMathOperator*{\Sup}    {Sup}
\DeclareMathOperator*{\Inf}    {Inf}
\DeclareMathOperator*{\Lim}    {Lim}
\DeclareMathOperator*{\Min}    {Min}
\DeclareMathOperator*{\Max}    {Max}
\DeclareMathOperator*{\ArgMin} {ArgMin}
\DeclareMathOperator*{\ArgMax} {ArgMax}
\DeclareMathOperator{\Abs}     {Abs}
\DeclareMathOperator{\Ln}      {Ln}
\DeclareMathOperator{\Log}     {Log}
\DeclareMathOperator{\Exp}     {Exp}
\DeclareMathOperator{\Cos}     {Cos}
\DeclareMathOperator{\Sin}     {Sin}
\DeclareMathOperator{\Tan}     {Tan}
\DeclareMathOperator{\Sec}     {Sec}
\DeclareMathOperator{\Csc}     {Csc}
\DeclareMathOperator{\Cot}     {Cot}
\DeclareMathOperator{\Cosh}    {Cosh}
\DeclareMathOperator{\Sinh}    {Sinh}
\DeclareMathOperator{\Tanh}    {Tanh}
\DeclareMathOperator{\Sech}    {Sech}
\DeclareMathOperator{\Csch}    {Csch}
\DeclareMathOperator{\Coth}    {Coth}
\DeclareMathOperator{\ArcCos}  {ArcCos}
\DeclareMathOperator{\ArcSin}  {ArcSin}
\DeclareMathOperator{\ArcTan}  {ArcTan}
\DeclareMathOperator{\ArcSec}  {ArcSec}
\DeclareMathOperator{\ArcCsc}  {ArcCsc}
\DeclareMathOperator{\ArcCot}  {ArcCot}
\DeclareMathOperator{\ArcCosh} {ArcCosh}
\DeclareMathOperator{\ArcSinh} {ArcSinh}
\DeclareMathOperator{\ArcTanh} {ArcTanh}
\DeclareMathOperator{\ArcSech} {ArcSech}
\DeclareMathOperator{\ArcCsch} {ArcCsch}
\DeclareMathOperator{\ArcCoth} {ArcCoth}
%    \end{macrocode}
%
%   \UWSubModule{Miscallaneous Functions}
%
%
%   Define the root function that has a tail.
%    \begin{macrocode}
\cs_new:Nn \UWMad_Math_RootWithTail:nn {

    \hbox_set:Nn \l_tmpa_box {
        $
            \mathchoice
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
                {\root #1 \of {#2\:\!}}
        $
    }
    %
    \dim_set:Nn \l_tmpa_dim {\box_ht:N \l_tmpa_box}
    \dim_set:Nn \l_tmpb_dim {0.8\l_tmpa_dim}
    %
    \hbox_set:Nn \l_tmpb_box {
        \tex_vrule:D height \l_tmpa_dim depth -\l_tmpb_dim
    }
    %
    \box_use:N \l_tmpa_box
    \box_move_down:nn {0.40pt}{\box_use:N \l_tmpb_box}
}
\DeclareDocumentCommand \Sqrt { O{} m } {
    \UWMad_Math_RootWithTail:nn{#1}{#2}
}
%    \end{macrocode}
%
%
%   User interface math mode check.
%    \begin{macrocode}
\DeclareExpandableDocumentCommand \IfMathModeTF { +m +m } {
    \mode_if_math:TF {
        #1
    }{
        $#2$
    }
}
%    \end{macrocode}
%
%
%   Undefine the \cs{sups} commands defined by the IPA package.
%    \begin{macrocode}
\cs_gset_eq:NN \supsipa \sups
\cs_undefine:N \sups
%    \end{macrocode}
%
%
%   Then define the \cs{subs}, \cs{sups}, and \cs{subsups} commands as
%   described in the manual.
%    \begin{macrocode}
\ExplSyntaxOff
    \DeclareDocumentCommand \subs { O{} +m } {%
        \IfMathModeTF{%
            _{\!\!\:#1\text{\scriptsize #2}}%
        }{%
            _{\!#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \sups { O{} +m } {%
        \IfMathModeTF{%
            ^{#1\text{\scriptsize #2}}%
        }{%
            ^{#1\text{\scriptsize #2}}%
        }%
    }%
    \DeclareDocumentCommand \subsups { O{} +m O{} +m } {%
        \IfMathModeTF{%
            _{#1\text{\scriptsize #2}}^{\!\!\:#3\text{\scriptsize #4}}%
        }{%
            _{#1\text{\scriptsize #2}}^{\!\!\!#3\text{\scriptsize #4}}%
        }%
    }%
\ExplSyntaxOn
\cs_gset_eq:NN \supsubs \subsups
%    \end{macrocode}
%
%
%   The one-over functions discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \OneOver { +m } {
    \frac{1}{#1}
}
\DeclareDocumentCommand \oneo { +m } {
    \OneOver{#1}
}
%    \end{macrocode}
%
%
%   The non-math `d' discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \dd { m } {
    \mathrm{d}{#1}
}
%    \end{macrocode}
%
%
%   The prime commands discussed in the manual.
%    \begin{macrocode}
\DeclareDocumentCommand \dprime { } {
    {\prime\prime}
}
\DeclareDocumentCommand \tprime { } {
    {\prime\prime\prime}
}
%    \end{macrocode}
%
%
%   Two commands that were necessary for proper typesetting.
%    \begin{macrocode}
\DeclareDocumentCommand \LessThan        { } {<}
\DeclareDocumentCommand \GreaterThanThan { } {>}
%
%    \end{macrocode}
%   \iffalse
%</Code>
%   \fi
%Verbatim
%</Implementation>